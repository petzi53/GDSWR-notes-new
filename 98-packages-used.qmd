# Packages used {#sec-z-annex}

```{r}
#| label: setup
#| results: hold
#| include: false

base::source(file = paste0(here::here(), "/R/helper.R"))
```

## cowplot {#sec-z-cowplot}

:::::: my-package
::: my-package-header
Package Profile: cowplot
:::

:::: my-package-container
<center>[Streamlined Plot Theme and Plot Annotations for {**ggplot2**}](https://wilkelab.org/cowplot/) [@cowplot]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-cowplot-min.png){width="176"}

The {**cowplot**} package provides various features that help with creating publication-quality figures, such as a set of themes, functions to align plots and arrange them into complex compound figures, and functions that make it easy to annotate plots and or mix plots with images. The package was originally written for internal use in the Wilke lab, hence the name (Claus O. Wilke’s plot package). It has also been used extensively in the book [Fundamentals of Data Visualization](https://www.amazon.com/gp/product/1492031089).
:::

------------------------------------------------------------------------

There are several packages that can be used to align plots. The most widely used ones beside {**cowplot**} are {**egg**} and {**patchwork**} (see @sec-z-patchwork). All these packages use slightly different approaches to plot alignment, and the respective approaches have different strengths and weaknesses. If you cannot achieve your desired result with one of these packages try another one.

Most importantly, while {**egg**} and {**patchwork**} align and arrange plots at the same time, {**cowplot**} aligns plots independently of how they are arranged. This makes it possible to align plots and then reproduce them separately, or even overlay them on top of each other.

The {**cowplot**} package now provides a set of complementary themes with different features. I now believe that there isn’t one single theme that works for all figures, and therefore I recommend that you always explicitly set a theme for every plot you make.
::::
::::::

## dplyr {#sec-z-dplyr}

:::::: my-package
::: my-package-header
Package Profile: dplyr
:::

:::: my-package-container
<center>[A Grammar of Data Manipulation](https://dplyr.tidyverse.org/) [@dplyr]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-dplyr-min.png){width="176"}

{**dplyr**} is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges: - mutate() adds new variables that are functions of existing variables - select() picks variables based on their names. - filter() picks cases based on their values. - summarise() reduces multiple values down to a single summary. - arrange() changes the ordering of the rows.
:::

------------------------------------------------------------------------

These all combine naturally with `group_by()` which allows you to perform any operation “by group”. You can learn more about them in [vignette("dplyr")](https://dplyr.tidyverse.org/articles/dplyr.html). As well as these single-table verbs, dplyr also provides a variety of two-table verbs, which you can learn about in [vignette("two-table")](https://dplyr.tidyverse.org/articles/two-table.html). [@dplyr]
::::
::::::

## forcats {#sec-z-forcats}

:::::: my-package
::: my-package-header
Package Profile: forcats
:::

:::: my-package-container
<center>[Tools for Working with Categorical Variables (Factors)](https://forcats.tidyverse.org/) [@forcats]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-forcats-min.png){width="176"}

{**forcats**} provide a suite of useful tools that solve common problems with factors. "Forcats" is an anagram of "factors" and part of the {**tidyverse**} suite of packages.
:::

(1) reordering factor levels
    -   moving specified levels to front,
    -   ordering by first appearance,
    -   reversing, and
    -   randomly shuffling
(2) tools for modifying factor levels
    -   collapsing rare levels into other,
    -   'anonymizing', and
    -   manually 'recoding'
::::
::::::

## ggplot2 {#sec-z-ggplot2}

:::::: my-package
::: my-package-header
Package Profile: ggplot2
:::

:::: my-package-container
<center>[Create Elegant Data Visualisations Using the Grammar of Graphics](https://ggplot2.tidyverse.org/) [@ggplot2]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-ggplot2-min.png){width="176"}

{**ggplot2**} is a system for declaratively creating graphics, based on [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0). You provide the data, tell {**ggplot2**} how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details. [@ggplot2]
:::

------------------------------------------------------------------------

It’s hard to succinctly describe how {**ggplot2**} works because it embodies a deep philosophy of visualization. However, in most cases you start with `ggplot()`, supply a dataset and aesthetic mapping (with `aes()`). You then add on layers (like `geom_point()` or `geom_histogram()`), scales (like `scale_colour_brewer()`), faceting specifications (like `facet_wrap()`) and coordinate systems (like `coord_flip()`).
::::
::::::

## glossary {#sec-z-glossary}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: glossary
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[Glossaries for Markdown and Quarto Documents](https://debruine.github.io/glossary/) [@glossary]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-glossary-min.png){width="176"}

Add glossaries to markdown and quarto documents by tagging individual words. Definitions can be provided inline or in a separate file.

:::

------------------------------------------------------------------------

There is a lot of necessary jargon to learn for working with geospatial data. The goal of this glossary is to provide a lightweight solution for making glossaries in educational materials written in quarto or R Markdown. This package provides functions to link terms in text to their definitions in an external glossary file, as well as create a glossary table of all linked terms at the end of a section.
::::
::::::



## glue {#sec-z-glue}

:::::: my-package
::: my-package-header
Package Profile: glue
:::

:::: my-package-container
<center>[Interpreted String Literals](https://glue.tidyverse.org/) [@glue]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-glue-min.png){width="176"}

An implementation of interpreted string literals, inspired by Python's Literal String Interpolation

:::

***


Glue offers interpreted string literals that are small, fast, and dependency-free. Glue does this by embedding R expressions in curly braces which are then evaluated and inserted into the argument string.
::::
::::::

## gridExtra {#sec-z-gridExtra}

::::: my-package
::: my-package-header
Package Profile: gridExtra
:::

::: my-package-container

------------------------------------------------------------------------

<center>[Miscellaneous Functions for "Grid" Graphics](https://cran.r-project.org/package=gridExtra) [@gridExtra]</center>

------------------------------------------------------------------------

<center>(*There is no hexagon sticker available for {**gridExtra**}.*)</center>

Provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables.

The {**grid**) package (= part of the R system library) provides low-level functions to create graphical objects (`grobs`), and position them on a page in specific viewports. The {**gtable**} package introduced a higher-level layout scheme, arguably more amenable to user-level interaction. With the `gridExtra::arrangeGrob()` / `gridExtra::grid.arrange()` pair of functions, {**gridExtra**} builds upon {**gtable**} to arrange multiple `grobs` on a page.
:::
:::::

## gtable {#sec-z-gtable}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: gtable
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[Arrange 'Grobs' in Tables](https://gtable.r-lib.org) [@gtable]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-gtable-min.png){width="176"}

Tools to make it easier to work with "tables" of 'grobs'. The 'gtable' package defines a 'gtable' grob class that specifies a grid along with a list of grobs and their placement in the grid. Further the package makes it easy to manipulate and combine 'gtable' objects so that complex compositions can be built up sequentially.

:::
::::
::::::




## patchwork {#sec-z-patchwork}

::::::::::::: my-package
::: my-package-header
Package Profile: patchwork
:::

::::::: my-package-container
<center>[The Composer of Plots](https://patchwork.data-imaginist.com/) [@patchwork]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-patchwork-min.png){width="176"}

The goal of {**patchwork**} is to make it ridiculously simple to combine separate `ggplots` into the same graphic. As such it tries to solve the same problem as `gridExtra::grid.arrange()` and `cowplot::plot_grid` but using an `r glossary("APIx", "API")` that incites exploration and iteration, and scales to arbitrarily complex layouts.
:::

------------------------------------------------------------------------

The {**ggplot2**} package provides a strong API for sequentially building up a plot, but does not concern itself with composition of multiple plots. {**patchwork**} is a package that expands the API to allow for arbitrarily complex composition of plots by, among others, providing mathematical operators for combining multiple plots. Other packages that try to address this need (but with a different approach) are {**gridExtra**} and {**cowplot**} (see @sec-z-gridExtra and @sec-z-cowplot).

Before plots can be laid out, they have to be assembled. Arguably one of patchwork’s biggest selling points is that it expands on the use of `+` in ggplot2 to allow plots to be added together and composed, creating a natural extension of the {**ggplot2**} API.

While quite complex compositions can be achieved using `+`, `|`, and `/`, it may be necessary to take even more control over the layout. All of this can be controlled using the `patchwork::plot_layout()` function along with a couple of special placeholder objects.

::::: my-remark
::: my-remark-header
{patchwork}: Personal Evaluation
:::

::: my-remark-container
In this book I am using the double colon notation instead of a `library()` call. Without this call it is more difficult to use the {**patchwork**} package.

See [Using plot arithmetic functions with `::` syntax](https://github.com/thomasp85/patchwork/issues/351#issuecomment-1931140157)

| operator | function                    | effect       |
|----------|-----------------------------|--------------|
| \+       | `ggplot2:::"+.gg"()`        | side by side |
| \-       | `patchwork:::"-.ggplot"()`  |              |
| \|       | `patchwork:::"\|.ggplot"()` |              |
| /        | `patchwork:::"/.ggplot"()`  | stacked      |
| \*       | `patchwork:::"*.gg"()`      |              |
| &        | `patchwork:::"&.gg"()`      |              |
:::
:::::
:::::::
::::::::

## plotly {#sec-z-plotly}

:::::: my-package
::: my-package-header
Package Profile: plotly
:::

:::: my-package-container
<center>[Create Interactive Web Graphics via 'plotly.js'](https://plotly.com/r/) [@plotly]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-plotly-min.png){width="176"}

Create interactive web graphics from 'ggplot2' graphs and/or a custom interface to the (MIT-licensed) JavaScript library 'plotly.js' inspired by the grammar of graphics.
:::

------------------------------------------------------------------------

Plotly.js is a standalone Javascript data visualization library, and it also powers the Python and R modules named plotly in those respective ecosystems (referred to as Plotly.py and Plotly.R).

Plotly.js can be used to produce dozens of chart types and visualizations, including statistical charts, 3D graphs, scientific charts, SVG and tile maps, financial charts and more.
::::
::::::

## rnaturalearth {#sec-z-rnaturalearth}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: rnaturalearth
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[World Map Data from Natural Earth](https://docs.ropensci.org/rnaturalearth/) [@rnaturalearth]</center>

------------------------------------------------------------------------


::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-ropensci-min.png){width="176"}

Facilitates mapping by making natural earth map data from [https://www.naturalearthdata.com/](https://www.naturalearthdata.com/) more easily available to R users. One low resolution example file & data can be downloaded from [NaturalEarth](https://www.naturalearthdata.com/downloads/) using `rnaturalearth::ne_download()`. For low (scale 110) and medium resolution (scale 50) files you would need the {**rnaturalearthdata**} package (@sec-z-rnaturalearthdata). High resolution (scale 10) files are too large to be submitted to CRAN because its size exceeds CRAN recommendations. These data are only available at the [GitHub repo](https://github.com/ropensci/rnaturalearthhires). 
:::

------------------------------------------------------------------------

This package provides :

- access to a pre-downloaded subset of Natural Earth v4.1.0 (March 2018) vector data commonly used in world mapping
- easy subsetting by countries and regions
- functions to download other Natural Earth vector and raster data
- a simple, reproducible and sustainable workflow from Natural Earth data to {**rnaturalearth**} enabling updating as new versions become available
- clarification of differences in world maps classified by countries, sovereign states and map units
- consistency with Natural Earth naming conventions so that {**rnaturalearth**} users can use Natural Earth documentation
- data in sf or sv formats

The Natural Earth website structures vector data by scale, category and type. These determine the filenames of downloads. {**rnaturalearth**} uses this structure to facilitate download (like an `r glossary("APIx", "API")`).
::::
::::::

## rnaturalearthdata {#sec-z-rnaturalearthdata}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: Package 'rnaturalearthdata'
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[World Map Data from Natural Earth Used in 'naturalearth'](https://docs.ropensci.org/rnaturalearthdata/) [@rnaturalearthdata]</center>

------------------------------------------------------------------------


::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-ropensci-min.png){width="176"}

Package holds low and medium resolution data used by {**rnaturalearth**}. Vector map data from [https://www.naturalearthdata.com/](https://www.naturalearthdata.com/). Access functions are provided in the accompanying package {**rnaturalearth**}. See @sec-z-rnaturalearth.

:::

------------------------------------------------------------------------


::::
::::::


## s2 {#sec-z-s2}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: s2
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[Spherical Geometry Operators Using the S2 Geometry](https://r-spatial.github.io/s2/) [@s2]</center>

------------------------------------------------------------------------

<center>(*There is no hexagon sticker available for {**s2**}.*)</center>  

Provides R bindings for [Google's s2 library](http://s2geometry.io/) for geometric calculations on the sphere. High-performance constructors and exporters provide high compatibility with existing spatial packages, transformers construct new geometries from existing geometries, predicates provide a means to select geometries based on spatial relationships, and accessors extract information about geometries.

::::
::::::


## sf {#sec-z-sf}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: sf
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[Simple Features for R](https://r-spatial.github.io/sf/) [@sf]</center>

------------------------------------------------------------------------


::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-sf-min.png){width="176"}

Support for simple feature access, a standardized way to encode and analyze spatial vector data. Binds to 'GDAL' [doi:10.5281/zenodo.5884351](doi:10.5281/zenodo.5884351) for reading and writing data, to 'GEOS' [doi:10.5281/zenodo.11396894](doi:10.5281/zenodo.11396894) for geometrical operations, and to 'PROJ' [doi:10.5281/zenodo.5884394](doi:10.5281/zenodo.5884394) for projection conversions and datum transformations. 
Uses by default the {**s2**} package for geometry operations on geodetic (long/lat degree) coordinates.
:::

------------------------------------------------------------------------

The above description may sound cryptic, but I will not explain it here. This whole note-book is dedicated to learn the various features of the {**sf**} package and to use it appropriately.
::::
::::::


## skimr {#sec-z-skimr}

::::::::: my-package
::: my-package-header
Package Profile: skimr
:::

::::::: my-package-container
<center>[Compact and Flexible Summaries of Data](https://docs.ropensci.org/skimr/) [@skimr]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-skimr-min.png){width="176"}

A simple to use summary function that can be used with pipes and displays nicely in the console.
:::

------------------------------------------------------------------------

The default summary statistics may be modified by the user as can the default formatting. Support for data frames and vectors is included, and users can implement their own skim methods for specific object types as described in a vignette. Default summaries include support for inline spark graphs. Instructions for managing these on specific operating systems are given in the [Using skimr](https://docs.ropensci.org/skimr/articles/skimr.html) vignette and the [README](https://github.com/ropensci/skimr/#skimr-).

::::: my-remark
::: my-remark-header
{skimr}: Personal Evaluation
:::

::: my-remark-container
At the moment I am just using the `skimr::skim()` function. I believe most of the many other functions for adaption are oriented to developers. But still: I need to have a closer look to this package.
:::
:::::
:::::::
:::::::::

## sp {#sec-z-sp}

:::::: my-num-packagebox
::: my-num-packagebox-header
Package Profile: sp
:::

------------------------------------------------------------------------

:::: my-num-packagebox-container
<center>[Classes and Methods for Spatial Data](https://edzer.github.io/sp/) [@sp]</center>

------------------------------------------------------------------------

<center>(*There is no hexagon sticker available for {sp}.*)</center>  

Classes and methods for spatial data; the classes document where the spatial location information resides, for 2D or 3D data. Utility functions are provided, e.g. for plotting data as maps, spatial selection, as well as methods for retrieving coordinates, for subsetting, print, summary, etc. From this version, 'rgdal', 'maptools', and 'rgeos' are no longer used at all, see [sp evolution status](https://r-spatial.org/r/2023/05/15/evolution4.html) for details.

------------------------------------------------------------------------
:::::{.my-remark}
:::{.my-remark-header}
{**sp**}: use **sf** instead of **rgdal**, **rgeos** and **maptools**
:::
::::{.my-remark-container}

Since October 2023 is the [state of transition process](https://r-spatial.org/r/2023/05/15/evolution4.html) from **sp** to **sf** finished. In new R code and dataset you should not be bothered anymore with the {**sp**} package.

::::
:::::

::::
::::::



## tidyr {#sec-z-tidyr}

:::::: my-package
::: my-package-header
Package Profile: tidyr
:::

:::: my-package-container
<center>[Tidy Messy Data](https://tidyr.tidyverse.org/) [@tidyr]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-tidyr-min.png){width="176"}

The goal of {**tidyr**} is to help you create tidy data. Tidy data describes a standard way of storing data that is used wherever possible throughout the {**tidyverse**}. If you ensure that your data is tidy, you’ll spend less time fighting with the tools and more time working on your analysis.
:::

------------------------------------------------------------------------

Tidy data is data where: - Every column is a variable. - Every row is an observation. - Every cell is a single value.
::::
::::::

## tidyselect {#sec-z-tidyselect}

::::: my-package
::: my-package-header
Package Profile: tidyselect
:::

::: my-package-container

------------------------------------------------------------------------

<center>[Select from a Set of Strings](https://tidyselect.r-lib.org/index.html) [@tidyselect]</center>

------------------------------------------------------------------------

(*There is no hexagon sticker available for {**tidyselect**}.*)

The {**tidyselect**} package is the backend of functions like `dplyr::select()` or `dplyr::pull()` as well as several {**tidyr**} verbs. It allows you to create selecting verbs that are consistent with other {**tidyverse**} packages.

To learn about the selection syntax as a user of {**dplyr**} or {**tidyr**}, read the user-friendly [?language](https://tidyselect.r-lib.org/reference/language.html) reference.

To learn how to implement tidyselect in your own functions, read [vignette("tidyselect")](https://tidyselect.r-lib.org/articles/tidyselect.html).

To learn exactly how the {**tidyselect**} syntax is interpreted, read the technical description in [vignette("syntax")](https://tidyselect.r-lib.org/articles/syntax.html).
:::
:::::



## tidyverse {#sec-z-tidyverse}

::::::::: my-package
::: my-package-header
Package Profile: tidyverse
:::

::::::: my-package-container
<center>[Easily Install and Load the 'Tidyverse'](https://www.tidyverse.org/) [@tidyverse]</center>

------------------------------------------------------------------------

::: {layout="[10, 30]" layout-valign="center"}
![](img/logoi/logo-tidyverse-min.png){width="176"}

The {**tidyverse**} is an opinionated [collection of R packages](https://www.tidyverse.org/packages/) designed for data science.
:::

------------------------------------------------------------------------

All packages share an underlying design philosophy, grammar, and data structures [@tidyverse]. Read more about the philosophy and purpose: [The tidy tools manifesto](https://tidyverse.tidyverse.org/articles/manifesto.html) and [Welcome to the {**tidyverse**}](https://tidyverse.tidyverse.org/articles/paper.html)

::::: my-remark
::: my-remark-header
{tidyverse}: Personal Evaluation
:::

::: my-remark-container
In this book I am not going to load {**tidyverse**} with all its packages. Instead I am using the `<package>::<function>` format to access the commands. Explicitly mentioned the used packages with every function call helps me to learn which package is responsible for which function.
:::
:::::
:::::::
:::::::::

