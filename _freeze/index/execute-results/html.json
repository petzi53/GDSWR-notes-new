{
  "hash": "b924f7994dbb4f8ea1721d99cf1e0a91",
  "result": {
    "engine": "knitr",
    "markdown": "---\nnocite: |\n  @wimberly-2022, @wimberly-2023, @wimberly-2023a, @dyba-2024\n---\n\n# Preface {.unnumbered}\n\n::: {.callout-note style=\"color: blue;\"}\n##### This is work in progress: Finished about 11%\n:::\n\nThis Quarto book collects my personal notes, trials and exercises of  Geographic Data Science With R: Visualizing and Analyzing Environmental Change by Michael Wimberly [@wimberly-2023a]. The book is also [available online](https://bookdown.org/mcwimberly/gdswr-book/). The dataset that accompanies the book can be downloaded from [figshare](https://figshare.com/articles/dataset/Geographic_Data_Science_with_R/21301212/3).\n\nI have some experience with the R language but none working with geodata. I want to use maps to show how statistical results differ by country. My focus is therefore on geodata, e.g., I have skipped chapters 1-4 because I am already familiar with their content of introducing R. I have added some additional material/experiments as separate annex chapters.\n\nThe book has twelve chapters with 267 pages (appendix and bibliography *not* included.) I skipped Chapter 1 to 4 (83 pages) because I am already familiar with their topics. The percentage is therefore calculated by notes referring to the chapters 5 to 12 (184 pages).\n\n::: {.my-resource}\n::: {.my-resource-header}\n:::::: {#lem-index-book-resources}\n: Resources used for Geographic Datascience with R (GDSWR)\n::::::\n:::\n\n::: {.my-resource-container}\n- Wimberly, M. C. (2023). [Geographic Data Science With R](https://www.amazon.com/-/de/dp/1032347716/): Visualizing and Analyzing Environmental Change (1st ed.). Chapman & Hall/CRC.\n- Wimberly, M. C. (2023). Geographic Data Science with R: Visualizing and Analyzing Environmental Change. [https://bookdown.org/mcwimberly/gdswr-book/](https://bookdown.org/mcwimberly/gdswr-book)\n- Wimberly, M. C. (2022). Geographic Data Science with R [Dataset]. figshare. [https://doi.org/10.6084/m9.figshare.21301212.v3](https://doi.org/10.6084/m9.figshare.21301212.v3)\n- Dyba, K. (2024, June 26). How to load and save vector data in R. R-Spatial. [https://r-spatial.org/r/2024/06/26/sf-load-save.html](https://doi.org/10.6084/m9.figshare.21301212.v3) (additionally used for chapter 5)\n\n:::\n:::\n\n\n## Packages used in this chapter\n\nTo refer to an R package I have used the format {**<package-name>**}, e.g., {**glossary**}. At the beginning of each file I have listed all packages used in the current chapter, as the next box demonstrates for this preface. \n\nThe package name is followed by the reference to the package author and a link to a short profile of the package that are collected in the annex (@sec-z-annex).\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-resource-text}\n: List of packages to install\n::::::\n:::\n::::{.my-resource-container}\n\n- {**glossary**}: \n  - Author: [@glossary]\n  - Package Profile: @sec-z-glossary\n\n::::\n:::::\n\n\n\n## Personal learning material\n\nI am writing this book as a text for others to read because that forces me to\nbecome explicit and explain all my learning outcomes more carefully.\nPlease keep in mind that this text is not written by an expert but by a\nlearner.\n\nText passages with content I am already familiar I have skipped. In this case I have started with chapter 5 because the chapters 1 to 4 is an introduction into using R which I am already comfortable with. \n\nSection of the original text where I needed more in-depth knowledge I have\nelaborated and added my own comments resulted from my personal research.\n\n::: {.callout-warning}\n###### All mistakes are my own responsibility\n\nThis is my personal learning material and is therefore\nneither an accurate replication nor an authoritative textbook.\n\nIn spite of replicating most of the content this Quarto book\nmay contain many mistakes. All the misapprehensions and errors are of\ncourse my own responsibility.\n:::\n\n\n## Glossary\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](https://debruine.github.io/glossary/logo.png)\n\nI am using the {**glossary**} package to create links to glossary\nentries. If you hover with your mouse over the double underlined links it opens\nan window with the appropriate glossary text. Try this example: <a class='glossary' title='GeoJSON is an open standard geospatial data interchange format based on JavaScript Object Notation (JSON). It was first published in June 2008 and became a standard specification with the publication of RFC 7946 in August 2016. GeoJSON is used to represent simple geographic features and their non-spatial attributes, such as points, lines, and polygons, and it uses the World Geodetic System 1984 as its geographic coordinate reference system. GeoJSON is widely used in web mapping applications due to its simplicity and compatibility with JavaScript. It supports various geometry types, including Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection. GeoJSON files are typically saved with a .geojson extension and have a MIME type of application/geo+json.'>geoJSON</a>. Additionally you will find a table of all used glossary entries in a specific chapter at the end of the chapter, immediately in front of the session-info.\n\n:::\n\nI have added many of the glossary entries when I was working through\nother books either taking the text passage of these books I was reading\nor via an internet recherche from other resources. I have added the\nsource of glossary entry. Sometimes I have used abbreviation, but I need\nstill to provide a key what this short references mean.\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-load-glossary}\n: Load glossary\n:::\n:::\n\n::: my-r-code-container\n\n\n\n::: {.cell}\n\n```{#lst-preface-load-glossary .r .cell-code  lst-cap=\"Install and load the glossary package with the appropriate glossary.yml file\"}\n## 1. Install the glossary package:\n## https://debruine.github.io/glossary/\n\nlibrary(glossary)\n\n## If you want to use my glossary.yml file:\n\n## 1. fork my repo\n##    https://github.com/petzi53/glossary-pb\n\n## 2. Download the `glossary.yml` file from\n##    https://github.com/petzi53/glossary-pb/blob/master/glossary.yml)\n\n## 3. Store the file on your hard disk\n##    and change the following path accordingly\n\nglossary::glossary_path(\"../glossary-pb/glossary.yml\")\n```\n:::\n\n\n\n:::\n:::\n\n\n\n\nIf you fork the repository of my [Geographic Datascience with R] (https://github.com/petzi53/GDSWR), the glossary will not\nwork out of the box. Load down the `glossary.yml` file from [my\nglossary-pb GitHub\nrepo](https://github.com/petzi53/glossary-pb/blob/master/glossary.yml),\nstore it on your hard disk and change the path in the code chunk\n@lst-preface-load-glossary.\n\n::: {.callout-warning}\n###### Glossary is my private learning vehicle\n\nWhat I have said to my personal notes in general is also valid for the glossary. The entries represent the state of my personal knowledge and are neither authoritative nor complete. \n:::\n\n\n## R Code and Datasets\n\n### Download datasets\n\nThe data files used in each chapter has to be downloaded from [https://doi.org/10.6084/m9.figshare.21301212](https://doi.org/10.6084/m9.figshare.21301212). \n\nRun the following code chunk only once (manually).\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-00-download-data-files}\n: Download Data Files\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nbase::source(file = \"R/helper.R\")\n\n## create data folder (only once, e.g., only in this chapter)\nbaseURL <- here::here()\nmy_create_folder(base::paste0(baseURL, \"/data\"))\n\nurl = \"https://figshare.com/ndownloader/files/39733921\"\nutils::download.file(url, base::paste0(baseURL, \"/data/gdswr_data.zip\"))\nutils::unzip(base::paste0(baseURL, \"/data/gdswr_data.zip\"), \n             exdir = base::paste0(baseURL, \"/data\"))\n\n## delete .zip file\nfn <- (base::paste0(baseURL, \"/data/gdswr_data.zip\"))\nif (file.exists(fn)) {\n  file.remove(fn)\n}\n```\n:::\n\n\n<center>(*For this R code chunk is no output available*)</center>\n\n::::\n:::::\n\n::: {.callout-warning}\n###### One data file exceeds GitHub's file size\n\nAfter I tried to commit my changes, I learned that there is a file `mesodata_large.csv`  in \"data/Chapter3\" with 151.28 MB. This exceeds GitHub's file size limit of 100.00 MB and can't, therefore, be stored on GitHub the standard way.   \n\nThere is the possibility to use Git Large File Storage - [https://git-lfs.github.com](https://git-lfs.github.com). However, I decided against this complexity. Actually, I did not need the files of `Chapter1` to `Chapter4` as I skipped the starting chapters. But instead to delete the file from my data subfolder, I changed the content of `.gitignore` accordingly so that this large file will not be transferred to GitHub.       \n\n:::\n\n\n\n### Style guides\n\nGenerally I am using the [Tidyverse Style\nGuide](https://style.tidyverse.org/) for code chunks. I am going to use underscore (`_`)\nor [snake case](https://en.wikipedia.org/wiki/Snake_case) to replace\nspaces as studies has shown that it is easier to read [@sharif2010].\n\nAdditionally I will use some [Google style modifications](https://google.github.io/styleguide/Rguide.html) from the tidyverse style\nguide:\n\n-   Start the names of private functions with `my_` (not with a dot, as recommended in the Google style guide).\n-   Don't use `base::attach()`.\n-   No right-hand assignments.\n-   Use explicit returns.\n-   Qualify namespace.\n\n### Qualifying namespace\n\nEspecially the last point (qualifying namespace) is important for my\nlearning. Besides preventing conflicts with functions of identical names\nfrom different packages it helps to learn (or remember) which function\nbelongs to which package. I think this justifies the small overhead and\nhelps to make R code chunks self-sufficient. (No previous package\nloading, or library calls in the setup chunk.) To foster learning the\nrelation between function and package I embrace the package name with\ncurly brakes and format it in bold.\n\nI am using the package name also for the default installation of base R.\nThis wouldn't be necessary but it helps me to understand where the base\nR functions come from. What follows is a list of base R packages of the\nsystem library included into every installation and attached (opened) by\ndefault:\n\n-   {**base**}: The R Base Package\n-   {**datsets**}: The R Datasets Package\n-   {**graphics**}: The R Graphics Package\n-   {**grDevices**}: The R Graphics Devices and Support for Colours and\n    Fonts\n-   {**methods**}: Formal Methods and Classes\n-   {**stats**}: The R Stats Package\n-   {**utils**}: The R Utils Package\n\nWhen it is clear then I will follow the advice from Hadley Wickham:\n\n> When you call a function, you typically omit the names of data\n> arguments, because they are used so commonly. If you override the\n> default value of an argument, use the full name ([tidyverse style\n> guide](https://style.tidyverse.org/syntax.html)).\n\n### Native pipe\n\n\nI am using the native pipe provided with R 4.1.0. It is important to know that there exist small but significant differences using the native pipe instead of the {**magrittr**} pipe. On of the consequences is that sometimes the code provided from the book with the {**magrittr**} pipe does not work with the native pipe. \n\nThis does not pose a general problem because you can mix both pipes. But where ever possible I have tried to stay with the native pipe.\n\nThe differences between native and {**magrittr**} pipe are complex and I will not go into the details here. But the following reading list provides you wit material to study the discrepancies.\n\n\n:::::{.my-resource}\n:::{.my-resource-header}\nDifferences between native pipe versus {**magrittr**} pipe\n:::\n::::{.my-resource-container}\n\n\n- Hadley Wickham in the [Tidyverse ](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) (\"Differences between the base R and magrittr pipes\"), \n- [Kathie Press](https://kpress.dev/blog/2022-06-19-replacing-the-magrittr-pipe-with-native-r-pipe/) (\"Replacing the Magrittr Pipe With the Native R Pipe\")\n- [Geek for Geeks](https://www.geeksforgeeks.org/what-are-the-differences-between-r-s-native-pipe-and-the-magrittr-pipe/) (\"What are the differences between R's native pipe `|>` and the {**magrittr**} pipe `%>%`?\")\n- [Isabella Velásquez](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) (\"Understanding the native R pipe `|>`\")\n- [StackOverflow](https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-native-pipe-and-the-magrittr-pipe) (\"What are the differences between R's native pipe `|>` and the {**magrittr**} pipe `%>%`?\")\n- [Yihui Xie](https://yihui.org/en/2022/04/magrittr-native-pipe/) (\"Substitute the magrittr Pipe `%>%` with R’s Native Pipe Operator `|>`\")\n- [R Bloggers](https://www.r-bloggers.com/2021/05/the-new-r-pipe/) (The new R pipe)\n- [Statistik Dresden](https://statistik-dresden.de/r-4-1-0-base-r-pipe/) (\"R 4.1.0: Base R Pipe! `|>`\") in German.\n::::\n:::::\n\n\n### Code linking\n\nCode linking does not work together with code annotation. I am therefore using standard comments for line numbering and explaining it in normal numbered lists after the code chunk. This is not optimal but for learning issues it is important to have link to the original documentations of the packages function.\n\n### Code snippets\n\nI am not using always the exact code snippets for my replications\nbecause I am not only replicating the code to see how it works but also\nto change the values of parameters to observe their influences.\n\nFunction starting with `my_` are private function developed by me to facilitate repetitive tasks. To understand what these functions do, inspect the \"R/helper.r\" file.\n\nThere is one exception to the `my_` convention: Geospatial data files are special and use a column type not covered with base R. To get data summaries using the `skimr::skim()` function I had to define a skim function list (`sfl`) specific for the `geometry` column.\n\n### Skimmers for the `sfc` data class\n\nFor the {**sf**} data classes in the `geometry` column are no skimmers available. Possible data types are:\n\n - sfc_POINT, \n - sfc_LINESTRING, \n - sfc_POLYGON, \n - sfc_MULTIPOINT, \n - sfc_MULTILINESTRING, \n - sfc_MULTIPOLYGON, and\n - sfc_GEOMETRY.\n\n(`sfc` stands for \"simple feature list column\".)\n \nThe `geometry` column is a combination of one of the above data types with the general `sfc` type. It is possible to adapt {**skimr**} for working with user defined data types using `skimr::skim_with()` or more generally with the `skimr::get_skimmers()` function to add default values for new data types to the standard `skimr::skim()` function. \n\nI have applied with `skimr::get_skimmers.sfc()` a skim function list `sfl()` to get summary data for the `sfc` data type of the `geometry` column. You can inspect the details of this function in the already mentioned \"R/helper.R\" file.\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-index-book-resources}\n: Defining `sfl` for `sfc` data types\n::::::\n:::\n::::{.my-resource-container}\nResources I have drawn upon to learn how to develop skimmers for the `geometry`column: \n\n- [Defining sfl’s for a package](https://docs.ropensci.org/skimr/articles/extending_skimr.html#defining-sfls-for-a-package): General article that explains how to generate and use with user defined data types. `sfl`stands for \"skimr function list\". It is a list-like data structure used to define custom summary statistics for specific data types.\n- [skim of {**sf**} objects](https://github.com/ropensci/skimr/issues/88): Discussion specific to the data types in the {**sf**} package.\n::::\n:::::\n\n\n\n## Glossary table\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GeoJSON </td>\n   <td style=\"text-align:left;\"> GeoJSON is an open standard geospatial data interchange format based on JavaScript Object Notation (JSON). It was first published in June 2008 and became a standard specification with the publication of RFC 7946 in August 2016. GeoJSON is used to represent simple geographic features and their non-spatial attributes, such as points, lines, and polygons, and it uses the World Geodetic System 1984 as its geographic coordinate reference system. GeoJSON is widely used in web mapping applications due to its simplicity and compatibility with JavaScript. It supports various geometry types, including Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection. GeoJSON files are typically saved with a .geojson extension and have a MIME type of application/geo+json. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.5.0 (2025-04-11)\n#>  os       macOS Sequoia 15.4.1\n#>  system   aarch64, darwin20\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       Europe/Vienna\n#>  date     2025-05-11\n#>  pandoc   3.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown)\n#>  quarto   1.8.4 @ /usr/local/bin/quarto\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package      * version date (UTC) lib source\n#>  cli            3.6.5   2025-04-23 [2] CRAN (R 4.5.0)\n#>  commonmark     1.9.5   2025-03-17 [2] CRAN (R 4.5.0)\n#>  curl           6.2.2   2025-03-24 [2] CRAN (R 4.5.0)\n#>  dichromat      2.0-0.1 2022-05-02 [2] CRAN (R 4.5.0)\n#>  digest         0.6.37  2024-08-19 [2] CRAN (R 4.5.0)\n#>  evaluate       1.0.3   2025-01-10 [2] CRAN (R 4.5.0)\n#>  farver         2.1.2   2024-05-13 [2] CRAN (R 4.5.0)\n#>  fastmap        1.2.0   2024-05-15 [2] CRAN (R 4.5.0)\n#>  glossary     * 1.0.0   2023-05-30 [2] CRAN (R 4.5.0)\n#>  glue           1.8.0   2024-09-30 [2] CRAN (R 4.5.0)\n#>  htmltools      0.5.8.1 2024-04-04 [2] CRAN (R 4.5.0)\n#>  htmlwidgets    1.6.4   2023-12-06 [2] CRAN (R 4.5.0)\n#>  jsonlite       2.0.0   2025-03-27 [2] CRAN (R 4.5.0)\n#>  kableExtra     1.4.0   2024-01-24 [2] CRAN (R 4.5.0)\n#>  knitr          1.50    2025-03-16 [2] CRAN (R 4.5.0)\n#>  lifecycle      1.0.4   2023-11-07 [2] CRAN (R 4.5.0)\n#>  litedown       0.7     2025-04-08 [2] CRAN (R 4.5.0)\n#>  magrittr       2.0.3   2022-03-30 [2] CRAN (R 4.5.0)\n#>  markdown       2.0     2025-03-23 [2] CRAN (R 4.5.0)\n#>  R6             2.6.1   2025-02-15 [2] CRAN (R 4.5.0)\n#>  RColorBrewer   1.1-3   2022-04-03 [2] CRAN (R 4.5.0)\n#>  rlang          1.1.6   2025-04-11 [2] CRAN (R 4.5.0)\n#>  rmarkdown      2.29    2024-11-04 [2] CRAN (R 4.5.0)\n#>  rstudioapi     0.17.1  2024-10-22 [2] CRAN (R 4.5.0)\n#>  rversions      2.1.2   2022-08-31 [2] CRAN (R 4.5.0)\n#>  scales         1.4.0   2025-04-24 [2] CRAN (R 4.5.0)\n#>  sessioninfo    1.2.3   2025-02-05 [2] CRAN (R 4.5.0)\n#>  stringi        1.8.7   2025-03-27 [2] CRAN (R 4.5.0)\n#>  stringr        1.5.1   2023-11-14 [2] CRAN (R 4.5.0)\n#>  svglite        2.2.0   2025-05-07 [2] CRAN (R 4.5.0)\n#>  systemfonts    1.2.3   2025-04-30 [2] CRAN (R 4.5.0)\n#>  textshaping    1.0.1   2025-05-01 [2] CRAN (R 4.5.0)\n#>  vctrs          0.6.5   2023-12-01 [2] CRAN (R 4.5.0)\n#>  viridisLite    0.4.2   2023-05-02 [2] CRAN (R 4.5.0)\n#>  xfun           0.52    2025-04-02 [2] CRAN (R 4.5.0)\n#>  xml2           1.3.8   2025-03-14 [2] CRAN (R 4.5.0)\n#>  yaml           2.3.10  2024-07-26 [2] CRAN (R 4.5.0)\n#> \n#>  [1] /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.5-arm64/library\n#>  * ── Packages attached to the search path.\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}