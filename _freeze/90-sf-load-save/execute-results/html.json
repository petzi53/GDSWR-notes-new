{
  "hash": "bcfb37577b81c0967f8da330e82b5822",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr: \n    opts_chunk: \n      code-fold: show\n      results: hold\n  \n---\n\n# Load and save vector data in R {#sec-annex-a}\n\n\n\n\n## Table of content for chapter 04 {.unnumbered}\n\n::::: {#obj-annex-a}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n\n\n:::\n::::\n:::::\n\n\n\nA much more complete overview about loading and saving  datasets of different formats is explained in [How to load and save vector data in R](https://r-spatial.org/r/2024/06/26/sf-load-save.html), a weblog article in [r-spatial](https://r-spatial.org/). I will follow the tutorial in this article and comment it in difference to the GDSWR book.\n\n## Getting data\n\nFirst of all I have to download the data to follow the tutorial.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-download-data-r-spatial-tutorial}\n: Download data for the r-spatial tutorial\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n##  run this code chunk only once (manually)\nbaseURL = here::here()\nmy_create_folder(base::paste0(baseURL, \"/data/annex-a\"))\n\n\n## download data into annex-a folder\n\nurl = \"https://github.com/kadyb/sf_load_save/archive/refs/heads/main.zip\"\nutils::download.file(url, base::paste0(baseURL, \"/data/annex-a/sf_load_save.zip\"))\nutils::unzip(base::paste0(baseURL, \"/data/annex-a/sf_load_save.zip\"),\n             exdir = base::paste0(baseURL, \"/data/annex-a\"))\n```\n:::\n\n***\n\n<center>(*For this R code chunk is no output available*)</center>\n::::\n:::::\n\n## Loading Shapefile (.shp)\n\nIt consists of several files (e.g., .shp, .shx, .dbf, .prj) that must be present in the same folder. [Wikipedia](https://en.wikipedia.org/wiki/Shapefile) has more details about this format. But this file format has [many limitations](http://switchfromshapefile.org/) and shouldn't be used anymore.\n\nInstead of using the `base::getwd()` and `base::setwd()` commands I am using `here::here()`, because it will always locate the files relative to the project root. \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-load-shape-file}\n: Load Shapefile\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n## get path of r-spatial data\nr_spatial_path = base::paste0(here::here(), \n                 \"/data/annex-a/sf_load_save-main/data/\")\n\n## load and display the shapefile\n(\n  countries = sf::read_sf(paste0(r_spatial_path, \"countries/countries.shp\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 52 features and 168 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -17.53604 ymin: -34.82195 xmax: 51.41704 ymax: 37.3452\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 52 × 169\n#>    featurecla   scalerank LABELRANK SOVEREIGNT SOV_A3 ADM0_DIF LEVEL TYPE  TLC  \n#>    <chr>            <int>     <int> <chr>      <chr>     <int> <int> <chr> <chr>\n#>  1 Admin-0 cou…         0         2 Ethiopia   ETH           0     2 Sove… 1    \n#>  2 Admin-0 cou…         0         3 South Sud… SDS           0     2 Sove… 1    \n#>  3 Admin-0 cou…         0         6 Somalia    SOM           0     2 Sove… 1    \n#>  4 Admin-0 cou…         0         2 Kenya      KEN           0     2 Sove… 1    \n#>  5 Admin-0 cou…         0         6 Malawi     MWI           0     2 Sove… 1    \n#>  6 Admin-0 cou…         0         3 United Re… TZA           0     2 Sove… 1    \n#>  7 Admin-0 cou…         0         5 Somaliland SOL           0     2 Sove… 1    \n#>  8 Admin-0 cou…         0         3 Morocco    MAR           0     2 Sove… 1    \n#>  9 Admin-0 cou…         0         7 Western S… SAH           0     2 Inde… 1    \n#> 10 Admin-0 cou…         0         4 Republic … COG           0     2 Sove… 1    \n#> # ℹ 42 more rows\n#> # ℹ 160 more variables: ADMIN <chr>, ADM0_A3 <chr>, GEOU_DIF <int>,\n#> #   GEOUNIT <chr>, GU_A3 <chr>, SU_DIF <int>, SUBUNIT <chr>, SU_A3 <chr>,\n#> #   BRK_DIFF <int>, NAME <chr>, NAME_LONG <chr>, BRK_A3 <chr>, BRK_NAME <chr>,\n#> #   BRK_GROUP <chr>, ABBREV <chr>, POSTAL <chr>, FORMAL_EN <chr>,\n#> #   FORMAL_FR <chr>, NAME_CIAWF <chr>, NOTE_ADM0 <chr>, NOTE_BRK <chr>,\n#> #   NAME_SORT <chr>, NAME_ALT <chr>, MAPCOLOR7 <int>, MAPCOLOR8 <int>, …\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\nAgain I will draw a map to get an idea about the content of the data. Again there are the two methods using `ggplot2::geom_sf()` or `base::plot()`. \n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-annex-a-plotting-tutorial-map}\n: Plotting Tutorial Shape File\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `ggplot2::geom_sf`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-plotting-tutorial-map-ggplot2}\n: Plotting Tutorial Map with {**ggplot2**}\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countries) +\n  ggplot2::geom_sf(fill = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Tutorial map plotted with {ggplot2}](90-sf-load-save_files/figure-html/fig-tutorial-map-ggplot2-1.png){#fig-tutorial-map-ggplot2 width=672}\n:::\n:::\n\n\n***\n\n`fill = NA` makes the countries transparent.\n\n(To get the same result as in the base R approach I used `ggplot2::theme_void()` to hide the coordinates which is shown in the original book example.) \n\n::::\n:::::\n\n\n###### `base::plot()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-tutorial-map-base-plot}\n: Plotting Tutorial Map with `base::plot()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ngraphics::par(mar = c(0, 0, 0, 0))\nbase::plot(sf::st_geometry(countries))\n```\n\n::: {.cell-output-display}\n![Tutorial map plotted with base::plot](90-sf-load-save_files/figure-html/fig-tutorial-map-base-plot-1.png){#fig-tutorial-map-base-plot width=672}\n:::\n:::\n\n\n***\n\nThe countries object has many (168) fields (attributes), but to start with we only need the `geometry` column. Instead of using `base::plot(countries$geometry)` we can obtain `geometry` by using the `sf::st_geometry()` function.\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n## Loading GeoPackage (.gpkg)\n\nThe next dataset is rivers (linear geometry) saved in [GeoPackage format](https://www.geopackage.org/). It is loaded in exactly the same way as the shapefile before. \n\nHowever, this format can consist of multiple layers of different types. In this case, we must define which layer exactly we want to load. To check what layers are in the geopackage, use the `sf::st_layers()` function, and then specify it using the layer argument in `sf::read_sf()`. If the file only contains one layer, we don’t need to do this.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-check-layers}\n: Check layers of GeoPackage file\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n## get path of r-spatial data\nr_spatial_path = base::paste0(here::here(), \n                 \"/data/annex-a/sf_load_save-main/data/\")\n\nsf::st_layers(base::paste0(r_spatial_path, \"rivers.gpkg\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Driver: GPKG \n#> Available layers:\n#>   layer_name     geometry_type features fields crs_name\n#> 1     rivers Multi Line String      228     38   WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n::::\n:::::\n\nWe can now load the rivers layers and display the metadata like in the shapefile example.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-show-rivers-metadata}\n: Load rivers layers and show metadata\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(\n  rivers = sf::read_sf(paste0(r_spatial_path, \"rivers.gpkg\"), layer = \"rivers\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 228 features and 38 fields\n#> Geometry type: MULTILINESTRING\n#> Dimension:     XY\n#> Bounding box:  xmin: -16.54233 ymin: -34.34378 xmax: 49.46094 ymax: 35.12311\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 228 × 39\n#>    dissolve  scalerank featurecla name  name_alt rivernum note  min_zoom name_en\n#>    <chr>         <int> <chr>      <chr> <chr>       <int> <chr>    <dbl> <chr>  \n#>  1 975River          9 River      <NA>  <NA>          975 <NA>       7.1 <NA>   \n#>  2 976River          9 River      Rung… <NA>          976 <NA>       7.1 Rungwa \n#>  3 977River          9 River      Ligo… <NA>          977 <NA>       7.1 Ligonha\n#>  4 978River          9 River      Dong… <NA>          978 <NA>       7.1 Dongwe \n#>  5 979River          9 River      Cuito <NA>          979 <NA>       7.1 Cuito  \n#>  6 980Lake …         9 Lake Cent… <NA>  <NA>          980 <NA>       7.1 <NA>   \n#>  7 980River          9 River      <NA>  <NA>          980 <NA>       7.1 <NA>   \n#>  8 981River          9 River      Bagoé <NA>          981 <NA>       7.1 Bagoé  \n#>  9 982River          9 River      Hade… <NA>          982 <NA>       7.1 Hadejia\n#> 10 983River          9 River      Sous  <NA>          983 <NA>       7.1 Sous   \n#> # ℹ 218 more rows\n#> # ℹ 30 more variables: min_label <dbl>, ne_id <dbl>, label <chr>,\n#> #   wikidataid <chr>, name_ar <chr>, name_bn <chr>, name_de <chr>,\n#> #   name_es <chr>, name_fr <chr>, name_el <chr>, name_hi <chr>, name_hu <chr>,\n#> #   name_id <chr>, name_it <chr>, name_ja <chr>, name_ko <chr>, name_nl <chr>,\n#> #   name_pl <chr>, name_pt <chr>, name_ru <chr>, name_sv <chr>, name_tr <chr>,\n#> #   name_vi <chr>, name_zh <chr>, name_fa <chr>, name_he <chr>, …\n```\n\n\n:::\n:::\n\n\n\n\n::::\n:::::\n\nVisualizing the rivers data we we will plot this time the rivers against the background of country borders. Adding more layers to the visualization is done with the `add = TRUE` argument in the `base::plot()` function. Note that the order in which objects are added is important – the objects added last are displayed at the top. The `col` argument is used to set the color of the object.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-annex-a-plotting-rivers-inside-countries-borders}\n: Plotting rivers inside country borders\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### base::plot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-plotting-rivers-inside-countries-borders-base-plot}\n: Visualizing rivers inside country borders using `base::plot()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nbase::plot(sf::st_geometry(countries))\nbase::plot(sf::st_geometry(rivers), add = TRUE, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](90-sf-load-save_files/figure-html/plotting-rivers-inside-countries-borders-base-plot-1.png){width=672}\n:::\n:::\n\n\n\n::::\n:::::\n\n\n###### ggplot2::geom_sf()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-plotting-rivers-inside-countries-borders-ggplot2}\n: Visualizing rivers inside country borders using `ggplot2::geom_sf()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countries) +\n  ggplot2::geom_sf(fill = NA) +\n  ggplot2::geom_sf(data = rivers, color = \"blue\") +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Plotting rivers inside countriy borders with {ggplot2}](90-sf-load-save_files/figure-html/plotting-rivers-inside-countries-borders-ggplot2-1.png){width=672}\n:::\n:::\n\n***\n\nAdding more layers to the visualization is done in {ggplot2} as always with the `+` sign.\n\nNote that the map is different (better) sized than the base::plot() example.\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n## Loading GeoJSON (.geojson)\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-loading-geojson}\n: Loading GeoJSON cities file\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n## get path of r-spatial data\nr_spatial_path = base::paste0(here::here(), \n                 \"/data/annex-a/sf_load_save-main/data/\")\n\n## load and display the GeoJSON file\n(\n  cities = sf::read_sf(paste0(r_spatial_path, \"cities.geojson\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 1287 features and 31 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -17.47508 ymin: -34.52953 xmax: 51.12333 ymax: 37.29042\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 1,287 × 32\n#>    scalerank natscale labelrank featurecla      name   namepar namealt nameascii\n#>        <int>    <int>     <int> <chr>           <chr>  <chr>   <chr>   <chr>    \n#>  1        10        1         8 Admin-1 capital Bassar <NA>    <NA>    Bassar   \n#>  2        10        1         8 Admin-1 capital Sotou… <NA>    <NA>    Sotouboua\n#>  3        10        1         7 Admin-1 capital Meden… <NA>    <NA>    Medenine \n#>  4        10        1         7 Admin-1 capital Kebili <NA>    <NA>    Kebili   \n#>  5        10        1         7 Admin-1 capital Tatao… <NA>    <NA>    Tataouine\n#>  6        10        1         7 Admin-1 capital L'Ari… <NA>    <NA>    L'Ariana \n#>  7        10        1         7 Admin-1 capital Jendo… <NA>    <NA>    Jendouba \n#>  8        10        1         7 Admin-1 capital Kasse… <NA>    <NA>    Kasserine\n#>  9        10        1         7 Admin-1 capital Sdid … <NA>    <NA>    Sdid Bou…\n#> 10        10        1         7 Admin-1 capital Silia… <NA>    <NA>    Siliana  \n#> # ℹ 1,277 more rows\n#> # ℹ 24 more variables: adm0cap <int>, capalt <int>, capin <chr>,\n#> #   worldcity <int>, megacity <int>, sov0name <chr>, sov_a3 <chr>,\n#> #   adm0name <chr>, adm0_a3 <chr>, adm1name <chr>, iso_a2 <chr>, note <chr>,\n#> #   latitude <dbl>, longitude <dbl>, pop_max <int>, pop_min <int>,\n#> #   pop_other <int>, rank_max <int>, rank_min <int>, meganame <chr>,\n#> #   ls_name <chr>, min_zoom <dbl>, ne_id <int>, geometry <POINT [°]>\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\nThe `featurecla` column that indicates the type of city. We want to print them selecting only state capitals.\n\nWe can print a column (attribute) in two ways, i.e. by specifying the column name in:\n\n- Single square brackets – a spatial object will be printed\n- Double square brackets (alternatively a dollar sign) – only the text will be printed\n\n\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-annex-a-print-capitals}\n: Print cities or capitals\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### cities object\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-print-cities-spatial-objects}\n: Print cities as spatial objects\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ncities[\"featurecla\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 1287 features and 1 field\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -17.47508 ymin: -34.52953 xmax: 51.12333 ymax: 37.29042\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 1,287 × 2\n#>    featurecla                  geometry\n#>    <chr>                    <POINT [°]>\n#>  1 Admin-1 capital    (0.7890036 9.261)\n#>  2 Admin-1 capital (0.9849965 8.557002)\n#>  3 Admin-1 capital       (10.4167 33.4)\n#>  4 Admin-1 capital     (8.971003 33.69)\n#>  5 Admin-1 capital         (10.4667 33)\n#>  6 Admin-1 capital      (10.2 36.86667)\n#>  7 Admin-1 capital      (8.749999 36.5)\n#>  8 Admin-1 capital   (8.716698 35.2167)\n#>  9 Admin-1 capital   (9.500004 35.0167)\n#> 10 Admin-1 capital   (9.383302 36.0833)\n#> # ℹ 1,277 more rows\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n\n###### cities text\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-print-cities-text}\n: Print cities as text\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"######## Using double square brackets  #############\")\nutils::head(cities[[\"featurecla\"]])\n\nglue::glue(\"\")\nglue::glue(\"############### Using dollar sign ##################\")\nutils::head(cities$featurecla)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ######## Using double square brackets  #############\n#> [1] \"Admin-1 capital\" \"Admin-1 capital\" \"Admin-1 capital\" \"Admin-1 capital\"\n#> [5] \"Admin-1 capital\" \"Admin-1 capital\"\n#> \n#> ############### Using dollar sign ##################\n#> [1] \"Admin-1 capital\" \"Admin-1 capital\" \"Admin-1 capital\" \"Admin-1 capital\"\n#> [5] \"Admin-1 capital\" \"Admin-1 capital\"\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n###### detect capitals\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-detect-capitals}\n: Detect category for capital cities\n::::::\n:::\n::::{.my-r-code-container}\n\nTab \"cities object\" shows us that this layer contains 1287 different cities. To find out what types of cities these are, we can use the `base::table()` function, which will summarize them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nbase::table(cities$featurecla)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#>        Admin-0 capital    Admin-0 capital alt        Admin-1 capital \n#>                     54                      6                    609 \n#> Admin-1 region capital        Populated place \n#>                     19                    599\n```\n\n\n:::\n:::\n\n\n***\n\nWe are not only interested in `Admin-0 capital` but also in `Admin-0 capital alt` because some countries have two capitals, e.g., an alternative capital. \n\n\n\n::::\n:::::\n\n###### select capitals\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-select-and-show-capitals}\n: Select and show first ten capital cities\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(\n  capitals <- cities |> \n      dplyr::filter(featurecla == \"Admin-0 capital\" | \n                    featurecla == \"Admin-0 capital alt\") |> \n      dplyr::select(name)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 60 features and 1 field\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -17.47508 ymin: -33.91807 xmax: 47.51468 ymax: 36.80278\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 60 × 2\n#>    name                   geometry\n#>    <chr>               <POINT [°]>\n#>  1 Lobamba        (31.2 -26.46667)\n#>  2 Bir Lehlou (-9.652522 26.11917)\n#>  3 Kigali     (30.05859 -1.951644)\n#>  4 Mbabane    (31.13333 -26.31665)\n#>  5 Juba        (31.58003 4.829975)\n#>  6 Dodoma        (35.75 -6.183306)\n#>  7 Laayoune   (-13.20001 27.14998)\n#>  8 Djibouti      (43.148 11.59501)\n#>  9 Banjul      (-16.5917 13.45388)\n#> 10 Porto-Novo  (2.616626 6.483311)\n#> # ℹ 50 more rows\n```\n\n\n:::\n:::\n\n***\n\nWe are interested in `Admin-0 capital` and `Admin-0 capital alt` types because some countries have two capitals. I filtered the data using the `|` (OR) operator.\n\nI am using the tidyverse approach with the native pipe instead of using base R as in the blog article.\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-annex-a-plot-africa-complete}\n: Plot Africa with rivers and capitals\n::::::\n\n::::\n\n\nIn the last step, we prepare the final visualization. \n\n\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `base::plot()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-base-plot-africa}\n: Visualize African borders with rivers and capitals using `base::plot()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nbase::plot(sf::st_geometry(countries), main = \"Africa\", axes = TRUE, bgc = \"deepskyblue\",\n     col = \"burlywood\")\nbase::plot(sf::st_geometry(rivers), add = TRUE, col = \"blue\")\nbase::plot(sf::st_geometry(capitals), add = TRUE, pch = 24, bg = \"red\", cex = 0.8)\n```\n\n::: {.cell-output-display}\n![](90-sf-load-save_files/figure-html/base-plot-africa-1.png){width=672}\n:::\n:::\n\n\n***\n\nWe can add a title (main argument), axes (axes argument) and change the background color (bgc argument) of the figure. We can also change the point symbol (pch argument), set its size (cex argument) and fill color (bg argument).\n\n\n::::\n:::::\n\n\n###### `ggplot2::geom_sf()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-a-ggplot2-africa}\n: Visualize African borders with rivers and capitals\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countries) +\n  ggplot2::geom_sf(fill = \"burlywood\") +\n  ggplot2::geom_sf(data = rivers, color = \"blue\") +\n  ggplot2::geom_sf(data = capitals, fill = \"red\", shape = 24) +\n  ggplot2::theme(\n    panel.background = ggplot2::element_rect(fill = \"deepskyblue\",\n                                color = \"deepskyblue\")\n  )\n```\n\n::: {.cell-output-display}\n![Africa](90-sf-load-save_files/figure-html/ggplot2-africa-1.png){width=672}\n:::\n:::\n\n***\n\nThis is essential the same map, but this time generated with {**gplot2**}.\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n",
    "supporting": [
      "90-sf-load-save_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}