{
  "hash": "8fb3dde0c3fcee4812e603061036e5f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr: \n    opts_chunk: \n      code-fold: show\n      results: hold\nexecute:\n  cache: false\n---\n# Vector Geospatial Data {#sec-chap05}\n\n\n\n\n\n::::: {#obj-chap05}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n1. Introduction to the {**sf**} package @sec-05-intro-sf\n1. Import geospatial data: @sec-05-esri-shapefile\n2. Creating simple maps: @sec-05-create-maps\n3. Overlaying vector datasets: @sec-05-overlaying-vector-datasets\n4. Save spatial geodata files: @sec-05-save-geodata\n5. Choropleth maps: @sec-05-choropleth-maps\n6. Modifying map appearance: @sec-05-modify-map-appearance\n7. Exporting graphics output: @sec-05-export-graphics\n8. Resources: @sec-05-resources\n9. Practice\n\n\n\n:::\n::::\n:::::\n\n## Introduction to {**sf**} {#sec-05-intro-sf}\n\nThe following text are taken quit literally from the textbook, p. 83.\n\nVector data consists of **features** that represent geographic phenomena. \n\n  - **Points** can be used to represent small objects such as wells, weather stations, or field plot locations. \n  - **Lines** represent one-dimensional linear features such as roads and streams. \n  - **Polygons** represent two-dimensional natural features such as lakes, vegetation patches, and burn scars as well as administrative units such as counties, districts, and counties. \n    \nThe type of geometry used to represent a particular feature may depend on the scale of the measurement. Points can be used to represent city locations at a continental scale, whereas a polygon would be used to map the boundary of an individual city.\n\nEach feature in a vector dataset is described by a set of spatial coordinates and one or more attributes that characterize the feature. For example, a vector dataset of forest stands would include the vertices of each stand boundary polygon as well an attribute table containing variables such as stand age, tree species abundances, and timber volume for each stand. \n\nThis book uses the {**sf**} package, developed by @sf to work with vector datasets as “simple features” in R. (See: @sec-z-sf) This approach uses data frame objects to store vector data. Each feature is represented by one row in the data frame, with attributes stored as columns and spatial information stored in a special geometry column. This means that we can use all the **tidyverse** package to use function from {**dplyr**} and {**tidyr**} (@sec-z-dplyr, @sec-z-tidyr).\n\nThe {**ggplot2**} (@sec-z-ggplot2) package can also be used to generate maps from data frames containing geospatial data with the `ggplot2::geom_sf()` function.\n\nIn the R package {**sf**} (Simple Features), many functions are prefixed with `st_`. The `st_` prefix is inspired by [PostGIS](https://postgis.net/), and refers with the abbreviation to “**s**patial **t**ype”. This prefix is used consistently throughout {**sf**} to indicate that a function operates on spatial data. In the context of {**sf**}, `st_` serves as a namespace for spatial functions, allowing developers and users to easily identify and find functions related to spatial operations. This prefixing convention makes it simple to discover and use spatial functions.\n\n\n## ESRI Shapefile Format {#sec-05-esri-shapefile}\n\n### Import Shapefile Geodata {#sec-05-import-shapefile-geodata}\n\n::: {.callout-note #nte-additional-info}\n###### Additional info in annex A\n\nFor this section I am going to use additional information provided by [How to load and save vector data in R](https://r-spatial.org/r/2024/06/26/sf-load-save.html). This weblog article in [r-spatial](https://r-spatial.org/) provides information not only about shapefiles (`.shp`) but also to the more modern geodata formats of geopackage (`.gpkg`) and geoJSON (`.geojson`).\n\nI will summarize the r-spatial blog article in @sec-annex-a.\n:::\n\n\nThe data for import in Chapter 5 of the book are provided in <a class='glossary' title='ESRI (Environmental Systems Research Institute) is a private American company that specializes in geographic information system (GIS) software, location intelligence, and mapping technology. ESRI’s flagship product is ArcGIS, a comprehensive GIS software suite that includes tools for data management, analysis, and visualization.'>ESRI</a> shapefile format. This format was developed several decades ago but remains a widely used file format for vector geospatial data. It is a multiple file format, consists of several files (e.g., `.shp`, `.shx`, `.dbf`, `.prj`). These different files contain information about the features of geometries, attribute table, spatial indices, and coordinate reference system. \n\nTo read in the geodata, it is only necessary to specify the file name in the `sf::st_read()` function with the `.shp` extension. However, all files (`.shp` file as well as the `.dbf`, `.shx`, and `.prj` files), need to be present in the same directory from which the data are read.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-import-ESRI-data}\n: Import ESRI Data\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nokcounty <- sf::st_read(\"data/Chapter5/ok_counties.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Reading layer `ok_counties' from data source \n#>   `/Users/petzi/Documents/Meine-Repos/GDSWR-notes-new/data/Chapter5/ok_counties.shp' \n#>   using driver `ESRI Shapefile'\n#> Simple feature collection with 77 features and 7 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -103.0025 ymin: 33.62184 xmax: -94.43151 ymax: 37.00163\n#> Geodetic CRS:  NAD83\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n`sf::st_read()` is a function with several parameters. Here I have just used the minimal invocation of the function, relying on the provided default values.\n\nThe function prints out general information about the data except when added the parameter `quiet = TRUE`, which I will use preferentially in later function calls.\n\nThere are two important issues connected with ESRI data:\n\n1. Checking `class(okcounty)` results in \"*sf, data.frame*\". With the parameter `as_tibble = TRUE` one would get *\"sf, tbl_df, tbl, data.frame\"*.\n2. Special importance has the spatial information per default located in the column named `geometry`. `class(okcounty$geometry)` returns in our case \"*sfc_POLYGON, sfc*\". But this result is just one outcome that depends of the actual data stored in `geometry` that could have seven different data classes: \n\n - sfc_POINT, \n - sfc_LINESTRING, \n - sfc_POLYGON, \n - sfc_MULTIPOINT, \n - sfc_MULTILINESTRING, \n - sfc_MULTIPOLYGON, and \n - sfc_GEOMETRY. \n \n `sfc` stands for \"**s**imple **f**eature (list) **c**olumn\"\n \n::: {.callout-warning #wrn-attention-geometry}\n###### Do not mess directly with the geometry column\n\n{**sf**} objects contain a special column called `geometry` that contains the geospatial information about the location of each feature. This column should not be modified directly because it is used by functions in the {**sf**} package for geospatial data processing.\n:::\n\n### Inspect Geospatial Data\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-inspect-geospatial-data}\n: Inspect geospatial data\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### glimpse\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-glimpse-geospatial-data}\n: Glimpse at the data\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ndplyr::glimpse(okcounty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 77\n#> Columns: 8\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"077\", \"025\", \"011\", \"107\", \"105\", \"153\", \"001\", \"053\", \"059\"…\n#> $ COUNTYNS <chr> \"01101826\", \"01101800\", \"01101793\", \"01101841\", \"01101840\", \"…\n#> $ AFFGEOID <chr> \"0500000US40077\", \"0500000US40025\", \"0500000US40011\", \"050000…\n#> $ GEOID    <chr> \"40077\", \"40025\", \"40011\", \"40107\", \"40105\", \"40153\", \"40001\"…\n#> $ NAME     <chr> \"Latimer\", \"Cimarron\", \"Blaine\", \"Okfuskee\", \"Nowata\", \"Woodw…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ geometry <POLYGON [°]> POLYGON ((-95.50766 35.0292..., POLYGON ((-103.0025 3…\n```\n\n\n:::\n:::\n\n\n***\n\nThe `ok_counties.shp` dataset contains county boundaries for the state of  Oklahoma.\n\nI am not interested here in the details of the dataset. The important point here is that the last column `geometry` contains the geospatial information. \n::::\n:::::\n\n\n###### skim\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-skim-geospatial-data}\n: Skim geospatial data\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nskimr::skim(okcounty)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |okcounty |\n|Number of rows           |77       |\n|Number of columns        |8        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|character                |7        |\n|sfc                      |1        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|STATEFP       |         0|             1|   2|   2|     0|        1|          0|\n|COUNTYFP      |         0|             1|   3|   3|     0|       77|          0|\n|COUNTYNS      |         0|             1|   8|   8|     0|       77|          0|\n|AFFGEOID      |         0|             1|  14|  14|     0|       77|          0|\n|GEOID         |         0|             1|   5|   5|     0|       77|          0|\n|NAME          |         0|             1|   3|  12|     0|       77|          0|\n|LSAD          |         0|             1|   2|   2|     0|        1|          0|\n\n\n**Variable type: sfc**\n\n|skim_variable | n_missing| complete_rate| missing| complete|  n| n_unique| valid|\n|:-------------|---------:|-------------:|-------:|--------:|--:|--------:|-----:|\n|geometry      |         0|             1|       0|       77| 77|        1|    77|\n\n\n:::\n:::\n\n***\n\nthe `class(okcounty$geometry)` = \"*sfc_POLYGON, sfc*\" is in the default version of {**skimr**} not user-defined and the fall back to the \"character\" class is not useful. I therefore had to adapt {**skimr**} for working with the class `sfc` which is common to all seven different class types for the geometry column. Resources that explain how to do this are:\n\n- [Defining sfl’s for a package](https://docs.ropensci.org/skimr/articles/extending_skimr.html#defining-sfls-for-a-package): General article that explains how to generate and use with user defined data types. `sfl` stands for \"skimr function list\". It is a list-like data structure used to define custom summary statistics for specific data types.\n- [skim of {**sf**} objects](https://github.com/ropensci/skimr/issues/88): Discussion specific skimmers for to the {**sf**} package.\n\nInspect the code I have used in the \"R/helper.R\" file.\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n- The `ok_counties.shp` dataset contains county boundaries for the state of  Oklahoma. \n- The `ok_tornado_point.shp` dataset and the `ok_tornado_path.shp`  dataset contain historical information about tornadoes in Oklahoma. \n    - The points are the initial locations of tornado touchdown. \n    - The paths are lines that identify the path of each tornado after touchdown.\n- These data were derived from larger, national-level datasets generated by the National Oceanographic and Atmospheric Administration (NOAA) [National Weather Service Storm Prediction Center](https://www.spc.noaa.gov/gis/svrgis/).\n\n### Conversion data sf <-> sp\n\nAn older package that is still frequently used for working with geospatial data in R is {**sp**} (@sp, see: @sec-z-sp). This package has been around for much longer than {**sf**}, and there are a number of other R packages that work with geospatial data objects defined in {**sp**}. Therefore, it is sometimes necessary to convert geospatial data between these two object classes. The following examples show how to convert `okcounty` into an {**sp**} `SpatialPolygonsDataFrame` object and then back to an {**sf**} object.\n\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-data-conversion-sf-sp}\n: {**sf**} data to {**sp**} data and reverse\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"############### convert from sf to sp data #############\")\nokcounty_sp <- sf::as_Spatial(okcounty) # sf::as(okcounty, 'Spatial') does not work!\nclass(okcounty_sp)\n\nglue::glue(\"\")\nglue::glue(\"############### convert from sp to sf data #############\")\nokcounty_sf <- sf::st_as_sf(okcounty_sp)\nclass(okcounty_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ############### convert from sf to sp data #############\n#> [1] \"SpatialPolygonsDataFrame\"\n#> attr(,\"package\")\n#> [1] \"sp\"\n#> \n#> ############### convert from sp to sf data #############\n#> [1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\nNote the conversion process in both direction is done with the {**sf**} package. You shouldn't need the {**sp**} package anymore. {**sf**} is in [maintenance mode](https://edzer.github.io/sp/), and currently requires sf for coordinate reference system validation and coordinate transformation, conversion and (re)projection.\n\n\n\n## Creating simple maps {#sec-05-create-maps}\n\nA good strategy to get an overview about the data is to plot the data as map. There are two options:  Using `ggplot2::geom_sf()` or `base::plot()`.\n\n### Draw Oklahoma county boundaries\n\nTo generate a map of counties using `ggplot2::ggplot()` with a {**sf**} object, the `ggplot2::geom_sf()` function is used.\n\nFrom the view of the {**ggplot2**} package the `ggplot2::geom_sf()` is an unusual geom because it will draw different geometric objects depending on what simple features are present in the data: you can get points, lines, or polygons. For text and labels, you can use `ggplot2::geom_sf_text()` and `ggplot2::geom_sf_label()`.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-ploting-oklahoma-county-boundaries}\n: Plotting Oklahoma county boundaries\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `ggplot2`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-oklahoma-county-boundaries-ggplot2}\n: Oklahoma county boundaries with {**ggplot2**}\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = okcounty) +\n  ggplot2::geom_sf(fill = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Oklahoma county boundaries plotted with {ggplot2}](05-vector-geospatial-data_files/figure-html/fig-05-oklahoma-county-boundaries-ggplot2-1.png){#fig-05-oklahoma-county-boundaries-ggplot2 width=672}\n:::\n:::\n\n\n***\n\n`fill = NA` makes the counties transparent.\n\n(To get the same result as in the base R approach I used `ggplot2::theme_void()` to hide the coordinates which is shown in the original book example.) \n\n::::\n:::::\n\n\n###### `base::plot()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-oklahoma-county-boundaries-base-plot}\n: Oklahoma county boundaries with `base::plot()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ngraphics::par(mar = c(0, 0, 0, 0))\nbase::plot(okcounty$geometry)\n```\n\n::: {.cell-output-display}\n![Oklahoma county boundaries plotted with base::plot()](05-vector-geospatial-data_files/figure-html/fig-05-oklahoma-county-boundaries-base-plot-1.png){#fig-05-oklahoma-county-boundaries-base-plot width=672}\n:::\n:::\n\n\n***\n\nFrom R Graph Gallery I learend that I could also use bese R to plot spatial geodata. But everybody agrees that using {**ggplot2**} is the preferred approach.\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n::: {.callout-note #nte-05-too-much-white-space}\n###### Too much space around cholorpleth map\n\nAs you can see from both graphics there is ample space aorund the map. I do not know how to remove it. Therefore I wrote a [question on StackOverflow](https://stackoverflow.com/questions/79295599/remove-white-space-around-sf-ggplot2-choropleth-map). I used a simple example provide by the {**sf**} package.\n:::\n\n\n\n\n\n### Inspect `tpoint` and `tpath`\n\nBecause {**sf**} objects are a type of data frame, they can be modified using the normal {**tidyverse**} functions. \n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-show-tornado-file-structure}\n: Display structure of the tornado files\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `tpoint`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-glimpse-tpoint}\n: Glimpse at `tpoint`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ntpoint <- sf::st_read(\"data/Chapter5/ok_tornado_point.shp\", quiet = TRUE)\ndplyr::glimpse(tpoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 4,092\n#> Columns: 23\n#> $ om       <dbl> 192, 27, 38, 57, 60, 61, 50, 52, 96, 108, 113, 117, 119, 76, …\n#> $ yr       <dbl> 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1…\n#> $ mo       <dbl> 10, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n#> $ dy       <dbl> 1, 27, 27, 28, 28, 28, 2, 3, 11, 16, 22, 24, 29, 4, 4, 4, 7, …\n#> $ date     <chr> \"1950-10-01\", \"1950-02-27\", \"1950-03-27\", \"1950-04-28\", \"1950…\n#> $ time     <chr> \"21:00:00\", \"10:20:00\", \"03:00:00\", \"14:17:00\", \"19:05:00\", \"…\n#> $ tz       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n#> $ st       <chr> \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"…\n#> $ stf      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n#> $ stn      <dbl> 23, 1, 2, 5, 6, 7, 3, 4, 15, 16, 17, 18, 19, 8, 9, 10, 11, 12…\n#> $ mag      <dbl> 1, 2, 2, 3, 4, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1…\n#> $ inj      <dbl> 0, 0, 0, 1, 32, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, …\n#> $ fat      <dbl> 0, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ loss     <dbl> 4, 4, 3, 5, 5, 4, 4, 3, 2, 3, 0, 4, 2, 4, 3, 5, 0, 4, 3, 4, 3…\n#> $ closs    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ slat     <dbl> 36.73, 35.55, 34.85, 34.88, 35.08, 34.55, 35.82, 36.13, 36.82…\n#> $ slon     <dbl> -102.52, -97.60, -95.75, -99.28, -96.40, -96.20, -97.02, -95.…\n#> $ elat     <dbl> 36.8800, 35.5501, 34.8501, 35.1700, 35.1300, 34.5501, 35.8201…\n#> $ elon     <dbl> -102.3000, -97.5999, -95.7499, -99.2000, -96.3500, -96.1999, …\n#> $ len      <dbl> 15.8, 2.0, 0.1, 20.8, 4.5, 0.8, 1.0, 1.0, 0.5, 7.3, 1.5, 1.0,…\n#> $ wid      <dbl> 10, 50, 77, 400, 200, 100, 100, 33, 77, 100, 100, 33, 33, 293…\n#> $ fc       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ geometry <POINT [°]> POINT (-102.52 36.73), POINT (-97.6 35.55), POINT (-95.…\n```\n\n\n:::\n:::\n\n\n\n***\n\nThe points are the initial locations of tornado touchdowns.\n::::\n:::::\n\n\n###### `tpath`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-glimpse-tpath}\n: Glimpse at `tpath`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ntpath <- sf::st_read(\"data/Chapter5/ok_tornado_path.shp\", quiet = TRUE)\ndplyr::glimpse(tpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 4,092\n#> Columns: 23\n#> $ om       <dbl> 192, 27, 38, 57, 60, 61, 50, 52, 96, 108, 113, 117, 119, 76, …\n#> $ yr       <dbl> 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1…\n#> $ mo       <dbl> 10, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n#> $ dy       <dbl> 1, 27, 27, 28, 28, 28, 2, 3, 11, 16, 22, 24, 29, 4, 4, 4, 7, …\n#> $ date     <chr> \"1950-10-01\", \"1950-02-27\", \"1950-03-27\", \"1950-04-28\", \"1950…\n#> $ time     <chr> \"21:00:00\", \"10:20:00\", \"03:00:00\", \"14:17:00\", \"19:05:00\", \"…\n#> $ tz       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n#> $ st       <chr> \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"…\n#> $ stf      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n#> $ stn      <dbl> 23, 1, 2, 5, 6, 7, 3, 4, 15, 16, 17, 18, 19, 8, 9, 10, 11, 12…\n#> $ mag      <dbl> 1, 2, 2, 3, 4, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1…\n#> $ inj      <dbl> 0, 0, 0, 1, 32, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, …\n#> $ fat      <dbl> 0, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ loss     <dbl> 4, 4, 3, 5, 5, 4, 4, 3, 2, 3, 0, 4, 2, 4, 3, 5, 0, 4, 3, 4, 3…\n#> $ closs    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ slat     <dbl> 36.73, 35.55, 34.85, 34.88, 35.08, 34.55, 35.82, 36.13, 36.82…\n#> $ slon     <dbl> -102.52, -97.60, -95.75, -99.28, -96.40, -96.20, -97.02, -95.…\n#> $ elat     <dbl> 36.8800, 35.5501, 34.8501, 35.1700, 35.1300, 34.5501, 35.8201…\n#> $ elon     <dbl> -102.3000, -97.5999, -95.7499, -99.2000, -96.3500, -96.1999, …\n#> $ len      <dbl> 15.8, 2.0, 0.1, 20.8, 4.5, 0.8, 1.0, 1.0, 0.5, 7.3, 1.5, 1.0,…\n#> $ wid      <dbl> 10, 50, 77, 400, 200, 100, 100, 33, 77, 100, 100, 33, 33, 293…\n#> $ fc       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ geometry <LINESTRING [°]> LINESTRING (-102.52 36.73, ..., LINESTRING (-97.6 …\n```\n\n\n:::\n:::\n\n\n***\n\nThe paths are lines that identify the path of each tornado after touchdown.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\nFrom `dplyr::glimpse()` we get an idea about the data structure. But we do not know the numeric span covered by the variable. This is especially important for our next task to focus on data from the last five years. We know from @exm-05-show-tornado-file-structure that the dataset starts with the year 1950 but we have no clue about the middle or end of the dataset.\n\nFor this reason I have designed a special functions that returns the first and last dataset and several random data. The default number of data shown is eight but this can be changed using a second parameter.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-show-random-tornado-data}\n: Show some random tornado data, including first and last record\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `tpoint`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-random-tpoint-data}\n: Show random `tpoint` data\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nmy_glance_data(tpoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 10 features and 23 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -102.52 ymin: 34.23 xmax: -95.774 ymax: 36.8768\n#> Geodetic CRS:  NAD83\n#>     obs     om   yr mo dy       date     time tz st stf stn mag inj fat  loss\n#> 1     1    192 1950 10  1 1950-10-01 21:00:00  3 OK  40  23   1   0   0 4e+00\n#> 2   634    519 1960  8  9 1960-08-09 12:00:00  3 OK  40  96   0   0   0 1e+00\n#> 3  1098    261 1969  6 11 1969-06-11 15:00:00  3 OK  40  18   0   0   0 0e+00\n#> 4  1177    188 1971  4 26 1971-04-26 19:56:00  3 OK  40  11   0   0   0 0e+00\n#> 5  1252    189 1973  4 19 1973-04-19 23:45:00  3 OK  40  11   2   2   0 6e+00\n#> 6  2369    371 1996  3 24 1996-03-24 12:55:00  3 OK  40   1   0   0   0 0e+00\n#> 7  2609   1209 1999  5 31 1999-05-31 19:24:00  3 OK  40 110   1   0   0 1e-02\n#> 8  3218    300 2010  5 10 2010-05-10 18:28:00  3 OK  40  47   1   0   0 3e-03\n#> 9  4069 619637 2021  1 30 2021-01-30 13:46:00  3 OK  40   0  -9   0   0 0e+00\n#> 10 4092 620265 2021  7 10 2021-07-10 18:25:00  3 OK  40   0   1   0   0 5e+04\n#>    closs    slat      slon    elat      elon  len wid fc\n#> 1      0 36.7300 -102.5200 36.8800 -102.3000 15.8  10  0\n#> 2      0 34.2500  -98.2300 34.2501  -98.2299  0.1  10  1\n#> 3      0 36.4500  -98.0200 36.4501  -98.0199  0.1  10  0\n#> 4      0 36.6000  -96.1000 36.6001  -96.0999  0.1  10  0\n#> 5      0 34.7000  -97.3000 34.8700  -97.0800 16.8 250  0\n#> 6      0 34.2300  -97.2700 34.2300  -97.2700  0.1  25  0\n#> 7      0 34.7700  -99.4500 34.7000  -99.4000  2.5 100  0\n#> 8      0 35.4239  -95.7757 35.4354  -95.7349  2.6 600  0\n#> 9      0 36.8768  -95.7740 36.8794  -95.7679  0.4  75  0\n#> 10     0 36.0880  -96.7200 36.0730  -96.7040  1.4 100  0\n#>                    geometry\n#> 1     POINT (-102.52 36.73)\n#> 2      POINT (-98.23 34.25)\n#> 3      POINT (-98.02 36.45)\n#> 4        POINT (-96.1 36.6)\n#> 5        POINT (-97.3 34.7)\n#> 6      POINT (-97.27 34.23)\n#> 7      POINT (-99.45 34.77)\n#> 8  POINT (-95.7757 35.4239)\n#> 9   POINT (-95.774 36.8768)\n#> 10    POINT (-96.72 36.088)\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n\n###### `tpath`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-random-tpath-data}\n: Show random `tpath` data\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nmy_glance_data(tpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 10 features and 23 fields\n#> Geometry type: LINESTRING\n#> Dimension:     XY\n#> Bounding box:  xmin: -102.52 ymin: 34.23 xmax: -95.7349 ymax: 36.88\n#> Geodetic CRS:  NAD83\n#>     obs     om   yr mo dy       date     time tz st stf stn mag inj fat  loss\n#> 1     1    192 1950 10  1 1950-10-01 21:00:00  3 OK  40  23   1   0   0 4e+00\n#> 2   634    519 1960  8  9 1960-08-09 12:00:00  3 OK  40  96   0   0   0 1e+00\n#> 3  1098    261 1969  6 11 1969-06-11 15:00:00  3 OK  40  18   0   0   0 0e+00\n#> 4  1177    188 1971  4 26 1971-04-26 19:56:00  3 OK  40  11   0   0   0 0e+00\n#> 5  1252    189 1973  4 19 1973-04-19 23:45:00  3 OK  40  11   2   2   0 6e+00\n#> 6  2369    371 1996  3 24 1996-03-24 12:55:00  3 OK  40   1   0   0   0 0e+00\n#> 7  2609   1209 1999  5 31 1999-05-31 19:24:00  3 OK  40 110   1   0   0 1e-02\n#> 8  3218    300 2010  5 10 2010-05-10 18:28:00  3 OK  40  47   1   0   0 3e-03\n#> 9  4069 619637 2021  1 30 2021-01-30 13:46:00  3 OK  40   0  -9   0   0 0e+00\n#> 10 4092 620265 2021  7 10 2021-07-10 18:25:00  3 OK  40   0   1   0   0 5e+04\n#>    closs    slat      slon    elat      elon  len wid fc\n#> 1      0 36.7300 -102.5200 36.8800 -102.3000 15.8  10  0\n#> 2      0 34.2500  -98.2300 34.2501  -98.2299  0.1  10  1\n#> 3      0 36.4500  -98.0200 36.4501  -98.0199  0.1  10  0\n#> 4      0 36.6000  -96.1000 36.6001  -96.0999  0.1  10  0\n#> 5      0 34.7000  -97.3000 34.8700  -97.0800 16.8 250  0\n#> 6      0 34.2300  -97.2700 34.2300  -97.2700  0.1  25  0\n#> 7      0 34.7700  -99.4500 34.7000  -99.4000  2.5 100  0\n#> 8      0 35.4239  -95.7757 35.4354  -95.7349  2.6 600  0\n#> 9      0 36.8768  -95.7740 36.8794  -95.7679  0.4  75  0\n#> 10     0 36.0880  -96.7200 36.0730  -96.7040  1.4 100  0\n#>                          geometry\n#> 1  LINESTRING (-102.52 36.73, ...\n#> 2  LINESTRING (-98.23 34.25, -...\n#> 3  LINESTRING (-98.02 36.45, -...\n#> 4  LINESTRING (-96.1 36.6, -96...\n#> 5  LINESTRING (-97.3 34.7, -97...\n#> 6  LINESTRING (-97.27 34.23, -...\n#> 7  LINESTRING (-99.45 34.77, -...\n#> 8  LINESTRING (-95.7757 35.423...\n#> 9  LINESTRING (-95.774 36.8768...\n#> 10 LINESTRING (-96.72 36.088, ...\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n### Visualization of the Oklahoma tornado data (2016-2021)\n\nBecause {**sf**} objects are a type of data frame, they can be modified using the normal {**tidyverse**} functions.\n\n- A reduced dataset for the years 2016-2021 and only with the columns ID (`om`), the year (`yr`), and the date (`date`) and is prepared in the first tab `reduce data`.\n- Initiation points of tornadoes in Oklahoma from 2016–2021 is shown in tab `initiation points`.\n- Tab `tornados path` shows the paths of tornadoes in Oklahoma from 2016–2021.\n- Initiation points of tornadoes in Oklahoma from 2016–2021 with years represented by the color aesthetic is in tab `color aesthetic`.\n- In the final tab `facets` you will see the initiation points of tornadoes in Oklahoma from 2016–2021 with years mapped as separate facets. \n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-different-tornado-visualizations}\n: Show different visualization of the Oklahoma tornado data (2016-2021)\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### reduce data\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-reduce-tornado-data}\n: Filter data from 2016 to 2021 and select only three columns (ID, year and date)\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ntpoint_16_21 <- tpoint |> \n  dplyr::filter(yr >= 2016 & yr <= 2021) |> \n  dplyr::select(om, yr, date)\n\ntpath_16_21 <- tpath |> \n  dplyr::filter(yr >= 2016 & yr <= 2021)  |> \n  dplyr::select(om, yr, date)\n```\n:::\n\n\n<center>(*For this R code chunk is no output available*)</center>\n\n::::\n:::::\n\n\n###### initiation points\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-tornado-initation-points}\n: Show initiation points of tornadoes in Oklahoma from 2016–2021\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::geom_sf(data = tpoint_16_21)\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016–2021.](05-vector-geospatial-data_files/figure-html/fig-show-tornado-initation-points-1.png){#fig-show-tornado-initation-points width=672}\n:::\n:::\n\n\n***\n\n- Because each function maps a different dataset, the data argument must be provided in each `ggplot2::geom_sf()` function instead of in the `ggplot2::ggplot()` function. \n- I am using as default theme the `ggplot2::theme_bw()` function (see setup chunk of this chapter) to display the map over a white background while retaining the graticules.\n\n\n\n::::\n:::::\n\n###### tornado paths\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-tornado-paths}\n: Show tornadoes paths in Oklahoma from 2016–2021\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +                              \n  ggplot2::geom_sf(data = okcounty, fill = NA) + \n  ggplot2::geom_sf(data = tpath_16_21,           \n          color = \"red\",                         \n          size = 1)                              \n```\n\n::: {.cell-output-display}\n![Paths of tornadoes in Oklahoma from 2016-2021.](05-vector-geospatial-data_files/figure-html/fig-show-tornado-paths-1.png){#fig-show-tornado-paths width=672}\n:::\n:::\n\n***\n\nTo make the tornado path lines easier to see in relation to the county boundaries, they are displayed in red and their sizes are increased to be larger (size = 1) than the default line width of 0.5.\n\n\n::::\n:::::\n\n###### color aesthetic\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-tornado-with-color-aesthetic}\n: Initiation points of tornadoes in Oklahoma from 2016-2021 with years represented by the color aesthetic\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = tpoint_16_21, \n          ggplot2::aes(color = forcats::as_factor(yr))) + # (1)\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n# ggplot2::scale_color_discrete(name = \"Year\") +          # (2)\n  ggokabeito::scale_color_okabe_ito(name = \"Year\") +      # (2)\n  ggplot2::coord_sf(datum = NA) +                         # (3)\n  ggplot2::theme_void()                                   # (3)\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016-2021 with years represented by the color aesthetic.](05-vector-geospatial-data_files/figure-html/fig-tornado-with-color-aesthetic-1.png){#fig-tornado-with-color-aesthetic width=672}\n:::\n:::\n\n***\n\nTo view the years of the tornadoes on the map, an aesthetic can be specified. \n\n**Line Comment 1**: In the book the color argument is specified as `base::as.factor(yr)` so that the year is displayed as a discrete variable instead of a continuous variable. Instead of the base function I have used `forcats::as_factor(yr)`.\n\n> Compared to base R, when x is a character, this function creates levels in the order in which they appear, which will be the same on every platform. (Base R sorts in the current locale which can vary from place to place.) (from the {**forcats**)} help file).\n\n\n**Line Comment 2**: The `ggplot2::scale_color_discrete()` function is used to set the legend name. But the used (standard) color scale is not appropriate for people with color-vision deficiency (<a class='glossary' title='Color vision deficiency (CVD) or color blindness (also spelled colour blindness) includes a wide range of causes and conditions and is actually quite complex. It’s a condition characterized by an inability or difficulty in perceiving and differentiating certain colors due to abnormalities in the three color-sensing pigments of the cones in the retina. (EnChroma)'>CVD</a>). I have therefore used `ggokabeito::scale_color_okabe_ito()`.\n\n\n**Line Comment 3**: The book says that the `ggplot2::theme_void()` function removes the plot axes and labels and shows only the map. I suppose that this is not correct. `ggplot2::coord_sf(datum = NA)` removes the plot axes and labels; `ggplot2::theme_void()` removes the border frame around the graphic.\n\n\n\n\n::::\n:::::\n\n###### facets\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-tornado-initiation-points-facets}\n: Initiation points of tornadoes in Oklahoma from 2016-2021 as facet visualization\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcounty, \n          fill = NA, \n          color = \"gray\") +\n  ggplot2::geom_sf(data = tpoint_16_21, size = 0.75) +\n  ggplot2::facet_wrap(ggplot2::vars(yr), ncol = 2) +\n  ggplot2::coord_sf(datum = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016-2021 with years mapped as separate facets.](05-vector-geospatial-data_files/figure-html/fig-tornado-initiation-points-facets-1.png){#fig-tornado-initiation-points-facets width=672}\n:::\n:::\n\n\n***\n\nAlternately, `ggplot2::facet_wrap()` can be used to display the tornadoes for each year on a separate map. In comparison to the previous tab the sizes of the points are reduced slightly from the standard `size = 1` to `size = 0.75`, so that they are better suited for the smaller maps. \n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n\n::: {.callout-note #nte-too-much-horizontal-space}\nWith the exception of the facet graphics there is too much horizontal space above and below the {**sf**} graphic. Is this a known problem? How to reduce the horizontal space for {**sf**} graphics plotted with {**ggplot2**}?\n:::\n\n:::::{.my-solution}\n:::{.my-solution-header}\nSolution: Remove empty space in maps\n:::\n::::{.my-solution-container}\nI found a solution after [posting the question in StackOverflow](https://stackoverflow.com/questions/79295599/remove-white-space-around-sf-ggplot2-choropleth-map): I need to set the figure size in the quarto chunk options so your figure has the right aspect ratio in the document. As far as I can see there are two options:\n\n- Reducing the heigt of the figure from its standard height of 5 inches. For instance to three inches with `fig-heigt: 3` in the quarto chunk option. See an example in @cnj-05-choropleth-filled-colors or @cnj-05-choropleth-mappying-symbols. (To see the chunk options together with the code I have used `echo: fenced` for these two chunks.)\n- Changing the aspect ratio from 1 to a smaller value, for instance to 3/4 with `ggplot2::theme(aspect.ratio = 3/4)`. See an example in @cnj-annex-b-zoom-europe-map.  \n\n\n\n::::\n:::::\n\n\n## Overlaying Vector Datasets {#sec-05-overlaying-vector-datasets}\n\n### A first spatial join\n\nThe number of tornado points in each county can be calculated using the `sf::st_join()` function to carry out a spatial join. A spatial join with {**sf**} is different from the joinwith {**dplyr**}: `sf::st_join()` links rows from the two tables based on the spatial locations instead of their attributes. \n\nIn this case the functions compares the point coordinates of the `tpoint_16_21` dataset in its `geometry` column with the polygon coordinates from the `geometry` column of the `okcounty` dataset. It joins `tpoint_16_21` with the `geometry` row that includes the appropriate polygon from `okcounty` containing the point coordinates. \n\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-spatial-join}\n: Overlaying vector datasets with a spatial join\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ncountypnt <- sf::st_join(tpoint_16_21, okcounty)  \n\ndplyr::glimpse(countypnt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 434\n#> Columns: 11\n#> $ om       <dbl> 613662, 613675, 613676, 613677, 613678, 613727, 613728, 61372…\n#> $ yr       <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2…\n#> $ date     <chr> \"2016-03-23\", \"2016-03-30\", \"2016-03-30\", \"2016-03-30\", \"2016…\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"001\", \"113\", \"105\", \"131\", \"035\", \"139\", \"139\", \"139\", \"139\"…\n#> $ COUNTYNS <chr> \"01101788\", \"01101844\", \"01101840\", \"01101853\", \"01101805\", \"…\n#> $ AFFGEOID <chr> \"0500000US40001\", \"0500000US40113\", \"0500000US40105\", \"050000…\n#> $ GEOID    <chr> \"40001\", \"40113\", \"40105\", \"40131\", \"40035\", \"40139\", \"40139\"…\n#> $ NAME     <chr> \"Adair\", \"Osage\", \"Nowata\", \"Rogers\", \"Craig\", \"Texas\", \"Texa…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ geometry <POINT [°]> POINT (-94.5042 35.6916), POINT (-96.0151 36.2151), POI…\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n### Count tornados per county\n\nAfterward, each row in `countypnt` data contains additional columns from the `okcounty` dataset that correspond to the county that the tornado with it point coordinates is within. The dataset contains one record for each tornado. \n\nTo compute the total number of tornadoes per county, `countypnt` must be grouped by the `GEOID` county code or by the county `NAME` (here by `GEOID` county code). \n\nBut before grouping and summarizing, `countypnt` must be converted from an {**sf**} object to a normal data frame using `sf::st_drop_geometry()`.\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-count-tornados-per-county}\n: Count tornados per county\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"#### show class before `sf::st_drop_geometry()` #####\")\nbase::class(countypnt)\ncountypnt <- sf::st_drop_geometry(countypnt)\nglue::glue(\"\")\nglue::glue(\"##### show class after `sf::st_drop_geometry()` ######\")\nbase::class(countypnt)\n\n\ncountysum <- countypnt |> \n  dplyr::group_by(GEOID) |> \n  dplyr::summarize(tcnt = dplyr::n())  \n\nglue::glue(\"\")\nglue::glue(\"##### glimpse at the new summarized data frame` ######\")\ndplyr::glimpse(countysum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> #### show class before `sf::st_drop_geometry()` #####\n#> [1] \"sf\"         \"data.frame\"\n#> \n#> ##### show class after `sf::st_drop_geometry()` ######\n#> [1] \"data.frame\"\n#> \n#> ##### glimpse at the new summarized data frame` ######\n#> Rows: 75\n#> Columns: 2\n#> $ GEOID <chr> \"40001\", \"40005\", \"40007\", \"40009\", \"40011\", \"40013\", \"40015\", \"…\n#> $ tcnt  <int> 6, 3, 4, 8, 1, 4, 10, 5, 7, 5, 3, 12, 10, 5, 5, 1, 7, 9, 7, 8, 2…\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n### Associate polygons with tornado counts\n\nIn the next step we join `okcounty` to `countysum` so that each polygon is associated with the appropriate tornado summary. \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-join-polygons-with-tornado-counts}\n: Associate each polygon with the appropriate tornado summary\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ncountymap <- okcounty   |>\n  dplyr::left_join(countysum, by = \"GEOID\")  |>        # (1)\n  dplyr::mutate(tcnt = \n        base::ifelse(base::is.na(tcnt), 0, tcnt)) |>   # (2)\n  dplyr::mutate(area = sf::st_area(okcounty),\n         tdens = 10^3 * 10^3 * tcnt / area)   |>       # (3)\n  units::drop_units()                                  # (4)\n\n\ndplyr::glimpse(countymap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 77\n#> Columns: 11\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"077\", \"025\", \"011\", \"107\", \"105\", \"153\", \"001\", \"053\", \"059\"…\n#> $ COUNTYNS <chr> \"01101826\", \"01101800\", \"01101793\", \"01101841\", \"01101840\", \"…\n#> $ AFFGEOID <chr> \"0500000US40077\", \"0500000US40025\", \"0500000US40011\", \"050000…\n#> $ GEOID    <chr> \"40077\", \"40025\", \"40011\", \"40107\", \"40105\", \"40153\", \"40001\"…\n#> $ NAME     <chr> \"Latimer\", \"Cimarron\", \"Blaine\", \"Okfuskee\", \"Nowata\", \"Woodw…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ tcnt     <dbl> 1, 12, 1, 10, 6, 2, 6, 0, 4, 9, 3, 10, 12, 1, 2, 8, 13, 4, 5,…\n#> $ geometry <POLYGON [°]> POLYGON ((-95.50766 35.0292..., POLYGON ((-103.0025 3…\n#> $ area     <dbl> 1890663261, 4766283042, 2427121029, 1657249513, 1503893122, 3…\n#> $ tdens    <dbl> 0.0005289149, 0.0025176851, 0.0004120108, 0.0060340944, 0.003…\n```\n\n\n:::\n:::\n\n\n***\n\n**Line comment 1**: Using `dplyr::left_join()` instead of `dplyr::inner_join()` ensures that all of the county polygons are retained in the output of the join. (`dplyr::inner_join()` only keeps observations from x that have a matching key in y, whereas `dplyr::left_join()` keeps all observations in x.)\n\n**Line comment 2**: If there are between 2016-2021 several tornados per county than we get several rows. But the reverse is also true: If a county has had no tornado in the years 2016-2021 this county gets `NA` values as the number of tornados. \n\nAs a matter of fact a few counties had no tornadoes during 2016–2021 and are therefore missing from `countysum`, resulting in `NA` values in the joined table. In this case, we know that `NA` means zero tornadoes, so the we must replace `NA` values by zeroes. I did this with the `dplyr::mutate()` function instead of `base::replace()`. Besides this approach does not need the `.` symbol of the {**magrittr**} packages (exporting into dplyr) for refering to the database (respectively its equivalent `_` for the R pipe). See for details @nte-chap03.\n\n**Line comment 3**: The second `dplyr::mutate()` function computes the area of each county using `sf::st_area()` and then calculates the density of tornadoes per county. Density is initially in tornadoes per square meter but is converted to tornadoes per 1000 km^2. \n\n**Line comment 4**: The `sf::st_area()` function returns a column with explicit measurement units, but these are removed using the `units::drop_units()` function for simplicity. For more information see the vignettes and help pages of the {**units**} package. \n\n::::\n:::::\n\n## Save spatial geodata files {#sec-05-save-geodata}\n\n### ESRI format\n\nThe `sf::st_write()` function can be used to save sf objects to a variety of file formats. In many cases, the function can determine the output format from the output filename extension. The following code saves the county-level tornado summaries in ESRI shapefile format. The `append = FALSE` option overwrites the shapefile if it already exists.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-ESRI-format}\n: Save spatial data files into ESRI format\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(countymap, \n         dsn = \"data/Chapter5/oktornadosum.shp\", \n         append = FALSE)\n```\n:::\n\n\n::::\n:::::\n\nAfter a message what the script does \n\n> > Writing layer `oktornadosum' to data source \n  `data/Chapter5/oktornadosum.shp' using driver `ESRI Shapefile'\n  Writing 77 features with 10 fields and geometry type Polygon.\n\nI got for every feature (= 77 rows) a warning message emitted by the GDAL library:\n\n> Warning: GDAL Message 1: Value 1890663260.74707699 of field area of feature 0 not successfully written. Possibly due to too larger number with respect to field width\n\nIt turned out that this is a [misleading warning](https://github.com/r-spatial/sf/issues/306) and that one should not use the old ESRI format but the newer and better Open Geospatial Consortium (OGC) GeoPackage format. See also [StackOverflow](https://stackoverflow.com/a/73242539/7322615) and the [answer from the {**sf**} developer](https://github.com/r-spatial/sf/issues/2368):\n\n> The general recommendation is to not use shapefiles: the format is not an open standard, it has many limitations and modern formats are available. A good alternative is GeoPackage.\n\n### GeoPackage format\n\nGeoPackage is also mentioned as an alternative in the book. The data are stored in an SQLite database that may contain one or more layers. In this example, the `delete_dsn = TRUE` argument overwrites the entire GeoPackage. Leaving this argument at its default value of `FALSE` would add a new layer to an existing database.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-geodata-in-GeoPackage-format}\n: Save spatial geodata in GeoPackage format\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(countymap, \n         dsn = \"data/Chapter5/oktornado.gpkg\", \n         layer = \"countysum\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Deleting source `data/Chapter5/oktornado.gpkg' using driver `GPKG'\n#> Writing layer `countysum' to data source \n#>   `data/Chapter5/oktornado.gpkg' using driver `GPKG'\n#> Writing 77 features with 10 fields and geometry type Polygon.\n```\n\n\n:::\n:::\n\n\n\n\n::::\n:::::\n\n### GeoJSON format\n\n\nAnother commonly-used open geospatial data format is GeoJSON. It is based on Javascript Object Notation (<a class='glossary' title='JSON (JavaScript Object Notation) is a standardized, text-based data interchange format used to represent structured data in a human-readable and machine-readable way. It is a lightweight, language-independent format that is widely used for exchanging data between web servers, web applications, and mobile apps.'>JSON</a>), a human-readable text format that stores data in ASCII files. The layer_options argument must be set to \"RFC7946 = YES\" to save the data in the newest GeoJSON specification.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-geodata-in-GeoJSON-format}\n: Save spatial geodata in GeoJSON format\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(obj = countymap, \n             dsn = \"data/Chapter5/oktornado.geojson\", \n             layer_options = \"RFC7946 = YES\",\n             delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Deleting source `data/Chapter5/oktornado.geojson' using driver `GeoJSON'\n#> Writing layer `oktornado' to data source \n#>   `data/Chapter5/oktornado.geojson' using driver `GeoJSON'\n#> options:        RFC7946 = YES \n#> Writing 77 features with 10 fields and geometry type Polygon.\n```\n\n\n:::\n:::\n\n\n\n\n::::\n:::::\n\nHere again I had to add `delete_dsn = TRUE` (`append = FALSE` did not work for this format!). Otherwise I would get an error message that the dataset already exists.\n\n## Choropleth Maps {#sec-05-choropleth-maps}\n\n### Filling with colors (standard)\n\nAnother way to display the tornadoes is as a choropleth map, where summary statistics for each county are displayed as different colors. The county-level tornado density can be as a choropleth using the `fill` aesthetic with `ggplot2::geom_sf()`. By default, the fill colors are based on a dark-to-light blue color ramp. The `ggplot2::theme_void()` function eliminates the axes and graticules and displays only the map on a white background.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-choropleth-filled-colors}\n: Densities of tornadoes mapped as a choropleth.\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"show\"}\n```{{r}}\n#| label: fig-choropleth-filled-colors\n#| fig-cap: \"Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth.\"\n#| fig-height: 3\n\nggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens)) +\n  ggplot2::theme_void() +\n  ggplot2::coord_sf()\n```\n````\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth.](05-vector-geospatial-data_files/figure-html/fig-choropleth-filled-colors-1.png){#fig-choropleth-filled-colors width=672}\n:::\n:::\n\n\n\n::::\n:::::\n\n### Mapping symbols\n\nTo map symbols, the county polygons must first be converted to points. The `sf::st_centroid()` generates a point feature located at the centroid of each county. The `sf::st_geometry_type()` function returns the feature geometry type. Setting `by_geometry = FALSE` returns one geometry type for the entire dataset instead of for every feature.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-convert-county-polygons-to-points}\n: Convert county polygons to points\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"##### Return geometry type before converted to points #####\")\nsf::st_geometry_type(okcounty, by_geometry = FALSE)\n\n\n############# Return the centroid of a geometry\nokcntrd = sf::st_centroid(countymap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"\")\nglue::glue(\"##### Return geometry type after converted to points #####\")\nsf::st_geometry_type(okcntrd, by_geometry = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ##### Return geometry type before converted to points #####\n#> [1] POLYGON\n#> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n#> \n#> ##### Return geometry type after converted to points #####\n#> [1] POINT\n#> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n:::\n\n\n\n\n::::\n:::::\n\n::: {.callout-note style=\"color: blue;\" #nte-05-attributes-constant-warning}\n###### How to get rid of the warning?\n\nAt the moment I do not know how to suppress the warning. Possible pointers to solve this problem are:\n\n- **sf GitHub**: [suppress specific warning message](https://github.com/r-spatial/sf/issues/406)\n- **Spatial Data Science**:  [Chapter 5](https://r-spatial.org/book/05-Attributes.html)\n\n> When, while manipulating geometries, attribute values are retained unmodified, support problems may arise. If we look into a simple case of replacing a county polygon with the centroid of that polygon on a dataset that has attributes, we see that R package sf issues a warning:\n>\n> *Warning: st_centroid assumes attributes are constant over geometries*\n:::\n\nThe tornado counts can be mapped using the `okcentrd` dataset with the `size` aesthetic. One point is plotted for each county centroid, and the size of the point is proportional to the number of tornadoes in the county.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-choropleth-mappying-symbols}\n: Choropleth map using graduated symbols\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"show\"}\n```{{r}}\n#| label: fig-choropleth-mappying-symbols\n#| fig-cap: \"Numbers of tornadoes in Oklahoma counties from 2016-2021 mapped as graduated symbols.\"\n#| fig.height: 3\n\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcntrd, ggplot2::aes(size = tcnt)) +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void()\n```\n````\n\n::: {.cell-output-display}\n![Numbers of tornadoes in Oklahoma counties from 2016-2021 mapped as graduated symbols.](05-vector-geospatial-data_files/figure-html/fig-choropleth-mappying-symbols-1.png){#fig-choropleth-mappying-symbols width=672}\n:::\n:::\n\n\n\n\n::::\n:::::\n\n## Modifying Map Appearance {#sec-05-modify-map-appearance}\n\n### {**RColorBrewer**}: Color palettes for choropleth mapping\n\nThe {**RColorBrewer**} package provides a selection of palettes designed for choropleth mapping (Harrower and Brewer 2003). The `display_brewer_all()` function generates a chart with examples of all the available palettes (@fig-rcolorbrewer-palettes).\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-rcolorbrewer-palettes}\n: Show color palettes of the {**RColorBrewer**} package\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nRColorBrewer::display.brewer.all()\n```\n\n::: {.cell-output-display}\n![Color palettes available in the RColorBrewer package.](05-vector-geospatial-data_files/figure-html/fig-rcolorbrewer-palettes-1.png){#fig-rcolorbrewer-palettes width=672}\n:::\n:::\n\n\n\n::::\n:::::\n\nThere are three types of ColorBrewer palettes. \n\n1. The top group in @fig-rcolorbrewer-palettes contains sequential palettes that are suitable for mapping ordered data along numerical scales (e.g., temperatures ranging from 0 to 30 degrees C) or ordinal categories (e.g., temperatures classified as cold, warm, and hot). These sequential palettes may include a single color or multiple colors, but have no clear breaks in the scale. \n2. The middle group in @fig-rcolorbrewer-palettes contains qualitative palettes, which use color to distinguish between different categories without implying order. \n3. The lower group in @fig-rcolorbrewer-palettes contains divergent palettes that emphasize a specific breakpoint in the data. Divergent palettes are often used to indicate values that are above or below the mean or to highlight values that are higher or lower than zero. \n\nMore details about these palettes, including recommendations for color schemes that are most effective for different types of computer displays and for accommodating color-blind viewers, are available at [http://colorbrewer2.org](@fig-rcolorbrewer-palettes).\n\n### Specifying a color palette for continuous data\n\nAdditional {**ggplot2**} functions can be added to improve the appearance of the map. \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-specify-color-palette}\n: Specifying a color palette for continuous data with {**RColorBrewer**}\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens * 10^3)) + # (1)\n  ggplot2::scale_fill_distiller(                        # (2)\n    name = base::expression(\"Tornadoes/1000 km\"^2),     # (3) \n    palette = \"YlOrRd\",                                 # (4)\n    breaks = scales::extended_breaks(n = 6),            # (5)\n    direction = 1) +                                    # (6)\n  ggplot2::theme_void() +                               # (7)\n  ggplot2::theme(legend.position = \"bottom\")            # (8)\n```\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth with a custom palette.](05-vector-geospatial-data_files/figure-html/fig-specify-continuous-color-palette-1.png){#fig-specify-continuous-color-palette width=672}\n:::\n:::\n\n\n***\n\n- **Line comment 1**: In contrast to the code in the book, I had to multiply the column for the tornado densities (`tdens`) with 10^3. Otherwise I would get decimal numbers overlapping each other after moving the legend to the bottom.\n- **Line comment 2**: The `ggplot2::scale_fill_distiller()` function allows the specification of a different color ramp.\n- **Line comment 3**: The `base::expression()` function is used for specifying the name argument for `ggplot2::scale_fill_distiller()` and to add text with a superscript.\n- **Line comment 4**: In this example we have used the “YlOrRd” palette from the {**RColorBrewer**} package. As the name says it starts from yellow and goes to red.\n- **Line comment 5**: The book uses the superseded `scales::pretty_breaks()` function instead the newer `scales::breaks_pretty()` function. This standard R break algorithm is primariy useful for date/times, for numeric scales the `scales::extended_breaks()` function does a slightly better job. `n = 6` is the number of desired breaks. You may get slightly more or fewer breaks that requested. (After trying it out I learned that in this case the `n` parameter wouldn't be necessary to get the same result.\n- **Line comment 6**: The default value is `direction = -1` and produces scales from dark to light colors. We want the reverse representing lighter colors with few and dark colors with many tornados.\n- **Line comment 7**: Note that “complete” themes like `ggplot2::theme_void()` will remove any settings made by a previous `ggplot2::theme()` function. Therefore, it is necessary to call `ggplot2::theme_void()` before `ggplot2::theme()` to implement specific theme setting settings. \n- **Line comment 8**: We moved the legend to the bottom of the map to better accomodate the longer legend title. \n::::\n:::::\n\n\n### Specifying a color palette for discrete data\n\nThe {**RColorBrewer**} palettes each contain a finite number of colors that are intended to be associated with categories in a choropleth map. Note that the `ggplot2::scale_fill_distiller()` function used to generate the color scale for the map in @fig-specify-continuous-color-palette operates a bit differently. This function takes a ColorBrewer palette and converts it to a continuous color ramp. \n\nThe next map example will show how to define categories and map each one as a distinctive color. To view the colors for a given number of categories and a specific palette, the `RColorBrewer::display.brewer.pal()` function is used with the number of categories as the first argument and the palette name as the second palette (@fig-colorbrewer-discrete-palette).\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-annex-b-colorbrewer-discrete-palette}\n: ColorBrewer discrete color palette\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nRColorBrewer::display.brewer.pal(4, \"YlOrRd\")\n```\n\n::: {.cell-output-display}\n![The ColorBrewer 'YlOrRd' (yellow to red) color palette with four categories.](05-vector-geospatial-data_files/figure-html/fig-colorbrewer-discrete-palette-1.png){#fig-colorbrewer-discrete-palette width=672}\n:::\n:::\n\n\n\n::::\n:::::\n\n\nRather than using continuous scales for color and size, it is often recommended to aggregate the data into a small number of classes (typically 3-6). Using discrete classes makes it easier to associate each color or symbol in the map with a specific range of values. \n\nTo accomplish this step, we need to add a couple of new classified variables using `dplyr::mutate()`. The `base::cut()` function is used to split the continuous variables based on user-specified breaks. The incidence variable is split based on quantiles (i.e., percentiles) defined in the `qbrks` object. The population breaks are manually specified.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-generate-discrete-classes}\n: Generating discrete classes\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnumclas = 4                                  # (1)\nqbrks <- seq(0, 1, length.out = numclas + 1) # (2)\nqbrks\n\ncountymap <- countymap |>                     # (3)\n  dplyr::mutate(tdens_c1 = base::cut(tdens * 10^3,\n                        breaks = stats::quantile(tdens * 10^3, breaks = qbrks),\n                        include.lowest = T))\n\nbase::class(countymap$tdens_c1)\nbase::levels(countymap$tdens_c1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.00 0.25 0.50 0.75 1.00\n#> [1] \"factor\"\n#> [1] \"[0,1.28]\"    \"(1.28,2.42]\" \"(2.42,3.69]\" \"(3.69,10.4]\"\n```\n\n\n:::\n:::\n\n***\n\n- **Line comment 1**: We want to create four different colors for the tornado density.\n- **Line comment 2**: Whatever the number of different colors, because of the end point to create we need to add 1 to this number.\n- **Line comment 3**: We create a new column `tdens_c1` for the break values of the tornado densities. The `tdens_c1` column is a discrete factor with 4 levels instead of a continuous numerical variable as in @fig-specify-continuous-color-palette.\n\n::::\n:::::\n\nBecause the new `tdens_c1` column is a discrete factor instead of a continuous numerical variable as in @fig-specify-continuous-color-palette we are now going to use the `ggplot2::scale_fill_brewer()` function is now used instead of `ggplot2::scale_fill_distiller()`. The comma-separated numbers specify the range of tornado densities for each of the categories (Figure 5.11).\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-mapping-colors-categories}\n: Mapping densities of tornados with color categories\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens_c1)) +\n  ggplot2::scale_fill_brewer(name = base::expression(\"Tornadoes/1000 km\"^2),   \n                    palette = \"YlOrRd\") +\n  ggplot2::theme_void() +\n  ggplot2::theme(legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth with four categories with colors](05-vector-geospatial-data_files/figure-html/fig-mapping-colors-categories-1.png){#fig-mapping-colors-categories width=672}\n:::\n:::\n\n\n\n::::\n:::::\n\n### Specifying graduate symbols with categories\n\nSimilar to choropleth maps, graduated symbol maps are often easier to interpret if they include a limited number of symbol sizes. To generate a classified map of tornado counts, they are converted to discrete categories using the `base::cut()` function. Instead of using quantiles, the breakpoints for the classification are selected manually and stored in the `brkpts` vector.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-mapping-symbols-categories}\n: Generating discrete classes for symbol mapping\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nmaxcnt <- max(okcntrd$tcnt)\nbrkpts <- c(0, 2, 5, 10, maxcnt)\nokcntrd <- okcntrd |> \n  dplyr::mutate(tcnt_c1 = base::cut(tcnt,\n                        breaks = brkpts,\n                        include.lowest = TRUE)\n                )\n\nbase::levels(okcntrd$tcnt_c1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"[0,2]\"   \"(2,5]\"   \"(5,10]\"  \"(10,16]\"\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\nThe resulting map has four symbol sizes, each associated with a specific range of tornado counts.\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-mapping-symbols-categories}\n: Mapping densities of tornados with symbol categories\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = okcntrd) +\n  ggplot2::geom_sf(ggplot2::aes(size = tcnt_c1)) +\n  ggplot2::scale_size_discrete(name = \"Tornados\") +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void() +\n  ggplot2::theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: Using size for a discrete variable is not advised.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth with four categories with symbols.](05-vector-geospatial-data_files/figure-html/fig-mapping-symbols-categories-1.png){#fig-mapping-symbols-categories width=672}\n:::\n:::\n\n\n\n\n::::\n:::::\n\n\n::: {.callout-warning #wrn-size-not-for-discrete-vars}\n###### Should I get rid of the warning?\n\nIn @fig-mapping-symbols-categories we got the warning \"Using size for a discrete variable is not advised.\" There are [two different opinions](https://stackoverflow.com/questions/50211624/why-and-when-using-size-for-a-discrete-variable-is-not-advised) about this warning:\n\n1. It is just \"a design tip to be broken when necessary\". \"… this warning is paternalistic and preachey. It has no place in a code warning, it is a style recommendation.\"\n2. \"Using size to map a non-ordinal categorical variable may suggest an ordinal relationship to the viewer, when none was intended. I find that's quite serious as it could result in miscommunication\".\n\nOne recommendation is to \"convert the categories to numbers and then do the mapping. That avoids the warning and ensures that the mapping happens exactly the way you want it to.\"\n\nWe are in fact mapping a ordinal categorical variable. Therefore the warning should be ignored. But for the purpose of learning I will change to code so that there is no warning message generated.\n\n:::\n\nIn the next two code chunks I am going to convert the categories to numbers (@cnj-05-generate-numbers-for-symbols-categories) and then I will do the mapping (@cnj-05-mapping-numbers-with-symbols-categories).\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-generate-numbers-for-symbols-categories}\n: Generating numbers for discrete classes\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nokcntrd <- okcntrd |> \n  dplyr::mutate(tcnt_c2 = dplyr::case_when(\n    tcnt_c1 == \"[0,2]\"   ~ 1,\n    tcnt_c1 == \"(2,5]\"   ~ 2,\n    tcnt_c1 == \"(5,10]\"  ~ 3,\n    tcnt_c1 == \"(10,16]\" ~ 4,\n    .default = NA\n    )\n  )\n\n\nbase::unique((ordered(okcntrd$tcnt_c2)))\nbase::class(okcntrd$tcnt_c2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1 4 3 2\n#> Levels: 1 < 2 < 3 < 4\n#> [1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n::::\n:::::\n\nThe mapping now needs with `ggplot2::scale_size()` a different scale (instead of `ggplot2::scale_size_discrete()`). However, I also need to adapt the legend labels to recover the binned values.\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-mapping-numbers-with-symbols-categories}\n: Mapping numbers with symbol categories\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = okcntrd) +\n  ggplot2::geom_sf(ggplot2::aes(size = tcnt_c2)) +\n  ggplot2::scale_size(\n    name = \"Tornados\",\n    labels = base::levels(okcntrd$tcnt_c1)\n    ) +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void() +\n  ggplot2::theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth with four categories with symbols. (Without warning)](05-vector-geospatial-data_files/figure-html/fig-mapping-symbols-categories2-1.png){#fig-mapping-symbols-categories2 width=672}\n:::\n:::\n\n\n::::\n:::::\n\n## Exporting Graphics Output {#sec-05-export-graphics}\n\nUntil now the generated maps and charts using {**ggplot2**} are output as HTML and [stored in the file for chapter 5 of my book notes](https://bookdown.org/pbaumgartner/gdswr-notes/05-vector-geospatial-data.html). \n\n> However, it is often necessary to export maps and other graphics to files and explicitly specify their dimensions and resolution. This is usually the case when generating graphics for publications that must meet specific size and formatting criteria.\n\nThe simplest way to do this is with the `ggplot2::ggsave()` function.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-ID}\n: Title for code collection\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### PNG\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-png-export}\n: Output to a portable network graphics (PNG)\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually to save the PNG graphics only once.**</center>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggsave(\"data/Chapter5/tornado.png\", \n       width = 6, \n       height = 4, \n       dpi = 300)\nggplot2::ggsave(\"data/Chapter5/tornado2.png\", \n       width = 15, \n       height = 10, \n       units = \"cm\", \n       dpi = 100)\n```\n:::\n\n\n***\n\n<center>(*For this R code chunk is no visible output available. However, a file was saved if you have run the code chunk manually.*)</center>\n\nThis example exports the most recent output of `ggplot2::ggplot()` to a portable network graphics (PNG) file called `tornado.png` with dimensions of 6 x 4 inches and a resolution of 300 pixels per inch. \n\nOther units besides inches can be used by specifying the units argument.\n\n::::\n:::::\n\n\n###### TIFF\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-TIFF-export}\n: Output to a tagged image file format (TIFF)\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually to save the TIFF graphics only once.**</center>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggsave(\"data/Chapter5/tornado.tiff\", \n       width = 6, \n       height = 4, \n       dpi = 300, \n       compression = \"lzw\")\n```\n:::\n\n\n***\n\n<center>(*For this R code chunk is no visible output available. However, a file was saved if you have run the code chunk manually.*)</center>\n\nWhen saving a TIFF, a compression type can be specified.\n\n::::\n:::::\n\n###### JPEG\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-JPEG-export}\n: Output to a Joint Photographic Experts Group file format (JPEG)\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually to save the JPEG graphics only once.**</center>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggsave(\"tornado.jpeg\", \n       width = 6, \n       height = 4, \n       dpi = 300, \n       quality = 90)\n```\n:::\n\n\n***\n\n<center>(*For this R code chunk is no visible output available. However, a file was saved if you have run the code chunk manually.*)</center>\n\nWhen saving a JPEG, a compression type can be specified.\n\n::::\n:::::\n\n###### PDF\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-PDF-export}\n: Output to a Portable Document Format file format (PDF)\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually to save the PDF graphics only once.**</center>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggsave(\n  \"data/Chapter5/tornado.pdf\", \n   width = 6, \n   height = 4\n  )\n```\n:::\n\n\n***\n\n<center>(*For this R code chunk is no visible output available. However, a file was saved if you have run the code chunk manually.*)</center>\n\nWhen saving a PDF, the `dpi` argument is ignored.\n\n::::\n:::::\n\n###### R Object\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-R-object-export}\n: Output to an R object\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually to save the R objects only once.**</center>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nchoropleth <- ggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens_c1)) +\n  ggplot2::scale_fill_brewer(name = \"Density\",   \n                    palette = \"YlOrRd\") +\n  ggplot2::theme_void()\n\ngradsymbol <- ggplot2::ggplot(data = okcntrd) +\n  ggplot2::geom_sf(ggplot2::aes(size = tcnt_c2)) +\n  ggplot2::scale_size(\n    name = \"Count\",\n    labels = base::levels(okcntrd$tcnt_c1)\n    ) +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void()\n\nggplot2::ggsave(\"data/Chapter5/choropleth.tiff\", \n       plot = choropleth,\n       width = 6, \n       height = 4, \n       dpi = 300, \n       compression = \"lzw\")\n\nggplot2::ggsave(\"data/Chapter5/gradsymbol.tiff\",\n       plot = gradsymbol,\n       width = 6, \n       height = 4, \n       dpi = 300, \n       compression = \"lzw\")\n```\n:::\n\n\n***\n\n<center>(*For this R code chunk is no visible output available. However, a file was saved if you have run the code chunk manually.*)</center>\n\nThe output of `ggplot2::ggplot()` can also be saved as an R object that can be output to graphics files using `ggplot2::ggsave()`. The `plot` argument is used to specify the ggplot object to be saved.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\nThere are several options to combine saved graphs and maps into a composite figure:\n\n- **Base R** with the `graphics::par()` function using `mfrow` or `mfcol` as parameters.\n- **{**ggpubr**} package** using the `ggpubr::ggarrange()` function [@ggpubr].\n- **{**patchwork**} package** using very flexible arrangements with plot arithmetic +, -, |, *, & [@patchwork].\n- **{**cowplot**} package** with the `cowplot::plot_grid()` function [@cowplot].\n\nI am going to demonstrate here just the last possibility as is this the example used in the book.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-combined-graphs}\n: Save combined graphics with the {**cowplot**} package\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nchoropleth <- ggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens_c1)) +\n  ggplot2::scale_fill_brewer(name = \"Density\",   \n                    palette = \"YlOrRd\") +\n  ggplot2::theme_void()\n\ngradsymbol <- ggplot2::ggplot(data = okcntrd) +\n  ggplot2::geom_sf(ggplot2::aes(size = tcnt_c2)) +\n  ggplot2::scale_size(\n    name = \"Count\",\n    labels = base::levels(okcntrd$tcnt_c1)\n    ) +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void()\n\ncowplot::plot_grid(choropleth, gradsymbol, \n          labels = c(\"\\n\\nA) Choropleth Map\", \n                     \"\\n\\nB) Graduated Symbols\",\n                     label_size = 12),\n          ncol = 1, \n          hjust = 0, \n          label_x = 0, \n          align = \"hv\")\n```\n\n::: {.cell-output-display}\n![](05-vector-geospatial-data_files/figure-html/base-r-saved-combined-graphs-1.png){width=672}\n:::\n:::\n\n\n\n\n::::\n:::::\n\n\n\n\n\nThe `cowplot::plot_grid()` function provides a variety of options for arranging figures in a regular grid. This basic example provides a label for each subplot and specifies additional arguments to plot the maps in a single column, justify the labels, move the labels besides each map, and align the maps horizontally and vertically, so they are exactly the same size.\n\n## Resources {#sec-05-resources}\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-05-resources}\n: Additional resources for working with the {**sf**} package\n::::::\n:::\n::::{.my-resource-container}\n\n- A variety of additional resources for working with the sf package can be found at https://r-spatial.github.io/sf/index.html. These include a link to the sf “cheatsheet” as well as a variety of articles, vignettes, and blog posts that provide additional examples of how to work with vector geospatial data using this package. \n  - A rather comrehensive overview about loading and saving  datasets of different formats is explained in the blog article [How to load and save vector data in R](https://r-spatial.org/r/2024/06/26/sf-load-save.html). I will follow the tutorial in this article in @sec-annex-a.\n- The book Geocomputation with R by Robin Lovelace and others [@lovelace-2020] is also an excellent reference that encompasses {**sf**} as well as many other R packages for working with geospatial data. Look for their forthcoming second edition [@lovelace-2025], which is already [online](https://r.geocompx.org/) for the most up-to-date information on geospatial data processing with R.\n- A more pressing knowledge for me is to learn how to get vector map data for creating maps. I am following here the tutorial by [@felixanalytix-2023] in @sec-annex-b.\n\n::::\n:::::\n\n\n\n\n\n",
    "supporting": [
      "05-vector-geospatial-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}